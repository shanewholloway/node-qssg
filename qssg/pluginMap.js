// Generated by CoffeeScript 1.6.1
var PipelinePlugin, PluginBaseMap, PluginCompositeMap, PluginDirsMap, PluginFilesMap, exports,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

PipelinePlugin = require('./pluginTypes').PipelinePlugin;

PluginBaseMap = (function() {

  function PluginBaseMap() {
    Object.defineProperties(this, {
      db: {
        value: {}
      }
    });
  }

  PluginBaseMap.prototype.inspect = function() {
    return "«" + this.constructor.name + "»";
  };

  PluginBaseMap.prototype.toString = function() {
    return this.inspect();
  };

  PluginBaseMap.prototype.invalidate = function() {
    this._cache = {};
    return this;
  };

  PluginBaseMap.prototype.reset = function() {
    this.db = {};
    return this.invalidate();
  };

  PluginBaseMap.prototype.clone = function() {
    var self;
    self = Object.create(this, {
      db: {
        value: Object.create(this.db)
      }
    });
    return self.invalidate();
  };

  PluginBaseMap.prototype.freeze = function(deep) {
    var hash;
    if (deep == null) {
      deep = true;
    }
    this.exportPluginsTo(hash = {}, deep);
    return this.reset().merge(hash);
  };

  PluginBaseMap.prototype.exportPluginsTo = function(tgt, deep) {
    var db, key, pi;
    db = this.db;
    for (key in db) {
      pi = db[key];
      if (deep || Object.hasOwnProperty(db, key)) {
        tgt[key] = pi;
      }
    }
    return tgt;
  };

  PluginBaseMap.prototype.merge = function(plugins) {
    var hash;
    if (plugins === true) {
      return this.freeze();
    } else if (plugins === false) {
      return this.reset();
    } else {
      if (plugins.exportPluginsTo != null) {
        plugins.exportPluginsTo(hash = {});
      } else {
        hash = plugins;
      }
      this.addPluginHash(hash);
    }
    return this.invalidate();
  };

  PluginBaseMap.prototype.addPluginHash = function(hash, deep) {
    var key, pi;
    for (key in hash) {
      pi = hash[key];
      if (deep || Object.hasOwnProperty(hash, key)) {
        if (this.acceptPlugin(key, pi)) {
          this.db[key] = pi;
        }
      }
    }
    return this.invalidate();
  };

  PluginBaseMap.prototype.addPluginAt = function(key, pi) {
    if (this.acceptPlugin(key, pi)) {
      this.db[key] = pi;
    }
    return this.invalidate();
  };

  PluginBaseMap.prototype.acceptPlugin = function(key, pi) {
    throw new Error("Subclass responsibility. (" + this.constructor.name + ")");
  };

  PluginBaseMap.prototype.findPluginListForExt = function(ext, entry) {
    var pi_list;
    if ((pi_list = this._cache[ext]) == null) {
      this._cache[ext] = pi_list = this._findPluginListForExt(ext, entry);
    }
    return pi_list.slice();
  };

  PluginBaseMap.prototype._findPluginListForExt = function(ext, entry) {
    throw new Error("Subclass responsibility. (" + this.constructor.name + ")");
  };

  PluginBaseMap.prototype["default"] = function() {
    return this.db[''];
  };

  PluginBaseMap.prototype.findPluginForKind = function(kind0, entry) {
    var pi_kind;
    if (kind0 != null) {
      pi_kind = this.db['&' + kind0];
      if ((pi_kind == null) && kind0.match(/\D/)) {
        console.warn("Plugin for kind '" + entry.kind0 + "' not found. (re: " + entry.srcRelPath + ")");
      }
      if (pi_kind != null) {
        return pi_kind;
      }
    }
    return this.db['&'];
  };

  PluginBaseMap.prototype.findPlugin = function(entry) {
    var pi_kind, pi_list;
    pi_list = this.findPluginListForExt(entry.ext, entry);
    pi_kind = this.findPluginForKind(entry.kind0, entry);
    return pi_kind.composePlugin(pi_list, entry);
  };

  return PluginBaseMap;

})();

PluginFilesMap = (function(_super) {

  __extends(PluginFilesMap, _super);

  function PluginFilesMap() {
    return PluginFilesMap.__super__.constructor.apply(this, arguments);
  }

  PluginFilesMap.prototype.acceptPlugin = function(key, pi) {
    if (key[0] === '&') {
      return pi.isFileKindPlugin;
    } else {
      return pi.isFilePlugin;
    }
  };

  PluginFilesMap.prototype._findPluginListForExt = function(ext, entry) {
    var i, n, pi, pi_list;
    n = ext.length;
    if (n === 0) {
      return [this.db['']];
    }
    pi = this.db[ext[n - 1]];
    if (n === 1) {
      return [pi || this["default"]()];
    }
    pi_list = (function() {
      var _i, _ref, _results;
      _results = [];
      for (i = _i = _ref = n - 2; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
        _results.push(this._lookupPair(ext[i], ext[i + 1]));
      }
      return _results;
    }).call(this);
    pi_list[0] || (pi_list[0] = pi);
    i = pi_list.indexOf(void 0);
    if (~i) {
      pi_list.splice(i);
    }
    if (pi_list.length === 0) {
      pi_list.push(this["default"]());
    }
    return pi_list;
  };

  PluginFilesMap.prototype._lookupPair = function(fmt, ext) {
    return this.db[[fmt, ext]] || this.db[[fmt, '*']] || this.db[['*', ext]];
  };

  return PluginFilesMap;

})(PluginBaseMap);

PluginDirsMap = (function(_super) {

  __extends(PluginDirsMap, _super);

  function PluginDirsMap() {
    return PluginDirsMap.__super__.constructor.apply(this, arguments);
  }

  PluginDirsMap.prototype.acceptPlugin = function(key, pi) {
    if (key[0] === '&') {
      return pi.isDirKindPlugin;
    } else {
      return pi.isDirPlugin;
    }
  };

  PluginDirsMap.prototype._findPluginListForExt = function(ext, entry) {
    if (ext.length === 0) {
      return [this.db['']];
    }
    if (ext.length > 1) {
      console.warn("Multiple extensions on directories are undefined. (re: " + entry.srcRelPath + ")");
    }
    return [this.db[ext[0]] || this["default"]()];
  };

  return PluginDirsMap;

})(PluginBaseMap);

PluginCompositeMap = (function() {
  var findPlugin;

  function PluginCompositeMap() {}

  PluginCompositeMap.prototype.PluginDirsMap = PluginDirsMap;

  PluginCompositeMap.prototype.PluginFilesMap = PluginFilesMap;

  PluginCompositeMap.prototype.inspect = function() {
    return "«" + this.constructor.name + "»";
  };

  PluginCompositeMap.prototype.toString = function() {
    return this.inspect();
  };

  PluginCompositeMap.prototype._initPluginMaps = function() {
    this.dirsMap = new this.PluginDirsMap();
    this.filesMap = new this.PluginFilesMap();
    return this.reset();
  };

  PluginCompositeMap.prototype.invalidate = function() {
    this.dirsMap.invalidate();
    this.filesMap.invalidate();
    return this;
  };

  PluginCompositeMap.prototype.reset = function() {
    this.dirsMap.reset();
    this.filesMap.reset();
    return this;
  };

  PluginCompositeMap.prototype.clone = function() {
    var self;
    self = Object.create(this);
    self.dirsMap = this.dirsMap.clone();
    self.filesMap = this.filesMap.clone();
    return self;
  };

  PluginCompositeMap.prototype.freeze = function(deep) {
    this.dirsMap.freeze(deep);
    this.filesMap.freeze(deep);
    return this;
  };

  PluginCompositeMap.prototype.exportPluginsTo = function(tgt, deep) {
    this.dirsMap.freeze(tgt, deep);
    this.filesMap.freeze(tgt, deep);
    return tgt;
  };

  PluginCompositeMap.prototype.merge = function(plugins) {
    this.dirsMap.merge(plugins);
    this.filesMap.merge(plugins);
    return this;
  };

  PluginCompositeMap.prototype.addPluginHash = function(hash) {
    this.dirsMap.addPluginHash(hash);
    this.filesMap.addPluginHash(hash);
    return this;
  };

  PluginCompositeMap.prototype.addPluginAt = function(key, pi) {
    this.dirsMap.addPluginAt(key, pi);
    this.filesMap.addPluginAt(key, pi);
    return this;
  };

  findPlugin = function(entry) {
    if (entry.isDirectory()) {
      return this.dirsMap.findPlugin(entry);
    } else {
      return this.filesMap.findPlugin(entry);
    }
  };

  PluginCompositeMap.prototype._findPlugin = findPlugin;

  PluginCompositeMap.prototype.findPlugin = findPlugin;

  return PluginCompositeMap;

})();

module.exports = exports = {
  PluginBaseMap: PluginBaseMap,
  PluginFilesMap: PluginFilesMap,
  PluginDirsMap: PluginDirsMap,
  PluginCompositeMap: PluginCompositeMap
};
