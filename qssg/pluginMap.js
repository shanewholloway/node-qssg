//@ sourceMappingURL=pluginMap.map
// Generated by CoffeeScript 1.6.1
var PipelinePlugin, PluginBaseMap, exports, inspect;

inspect = require('util').inspect;

PipelinePlugin = require('./pluginTypes').PipelinePlugin;

PluginBaseMap = (function() {

  function PluginBaseMap() {
    this.reset();
  }

  PluginBaseMap.prototype.inspect = function() {
    return "«" + this.constructor.name + " | " + (Object.keys(this.exportPlugins()).join(' | ')) + " |»";
  };

  PluginBaseMap.prototype.toString = function() {
    return this.inspect();
  };

  PluginBaseMap.prototype.countDbKeys = function() {
    var i, k;
    i = 0;
    for (k in this.db) {
      i++;
    }
    return i;
  };

  PluginBaseMap.prototype.invalidate = function() {
    this._cache = {};
    return this;
  };

  PluginBaseMap.prototype.reset = function(defaultMode) {
    this.db = {};
    this.addDefaultPlugins(defaultMode);
    return this.invalidate();
  };

  PluginBaseMap.prototype.clone = function() {
    var self;
    self = Object.create(this);
    self.db = Object.create(this.db);
    return self.invalidate();
  };

  PluginBaseMap.prototype.freeze = function() {
    var hash;
    hash = this.exportPlugins();
    return this.reset().merge(hash);
  };

  PluginBaseMap.prototype.exportPlugins = function(hash) {
    var key, pi, _ref;
    if (hash == null) {
      hash = {};
    }
    _ref = this.db;
    for (key in _ref) {
      pi = _ref[key];
      hash[key] = pi;
    }
    return hash;
  };

  PluginBaseMap.prototype.merge = function(plugins) {
    if (isFinite(plugins)) {
      if (plugins === true) {
        return this.freeze();
      } else if (plugins === false || plugins === null) {
        return this.reset();
      } else if (plugins === 0) {
        return this.reset(false);
      }
      throw new Error("Unknown merge sentinal '" + plugins + "' (" + (typeof plugins) + ")");
    } else {
      this.addPluginHash((typeof plugins.exportPlugins === "function" ? plugins.exportPlugins() : void 0) || plugins);
    }
    return this.invalidate();
  };

  PluginBaseMap.prototype.addPluginHash = function(hash, deep) {
    var key, pi;
    for (key in hash) {
      pi = hash[key];
      if (deep || hash.hasOwnProperty(key)) {
        if (this.acceptPlugin(key, pi)) {
          this.db[key] = pi;
        }
      }
    }
    return this.invalidate();
  };

  PluginBaseMap.prototype.addPluginAt = function(key, pi) {
    if (this.acceptPlugin(key, pi)) {
      this.db[key] = pi;
    }
    return this.invalidate();
  };

  PluginBaseMap.prototype.acceptPlugin = function(key, pi) {
    var ans;
    ans = (function() {
      if (key[0] === '&') {
        return pi.isKindPlugin;
      } else {
        return pi.isFilePlugin;
      }
    })();
    return ans;
  };

  PluginBaseMap.prototype.findPluginListForExt = function(ext, entry) {
    var pi_list;
    if ((pi_list = this._cache[ext]) == null) {
      this._cache[ext] = pi_list = this._findPluginListForExt(ext, entry);
    }
    return pi_list.slice();
  };

  PluginBaseMap.prototype["default"] = function() {
    return this.db[''];
  };

  PluginBaseMap.prototype._findPluginListForExt = function(ext, entry) {
    var i, n, pi, pi_list;
    n = ext.length;
    if (n === 0) {
      return [this.db['']];
    }
    pi = this.db[ext[n - 1]];
    if (n === 1) {
      return [pi || this["default"]()];
    }
    pi_list = (function() {
      var _i, _ref, _results;
      _results = [];
      for (i = _i = _ref = n - 2; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
        _results.push(this._lookupPair(ext[i], ext[i + 1]));
      }
      return _results;
    }).call(this);
    pi_list[0] || (pi_list[0] = pi);
    i = pi_list.indexOf(void 0);
    if (~i) {
      pi_list.splice(i);
    }
    if (pi_list.length === 0) {
      pi_list.push(this["default"]());
    }
    return pi_list;
  };

  PluginBaseMap.prototype._lookupPair = function(fmt, ext) {
    return this.db[[fmt, ext]] || this.db[[fmt, '*']] || this.db[['*', ext]];
  };

  PluginBaseMap.prototype.findPluginForKind = function(kind0, entry) {
    var pi_kind;
    if (kind0 != null) {
      pi_kind = this.db['&' + kind0];
      if ((pi_kind == null) && kind0.match(/\D/)) {
        console.warn("Plugin for kind '" + entry.kind0 + "' not found. (re: " + entry.srcRelPath + ")");
      }
      if (pi_kind != null) {
        return pi_kind;
      }
    }
    return this.db['&'];
  };

  PluginBaseMap.prototype.findPlugin = function(entry) {
    var pi_kind, pi_list;
    if (!entry.isDirectory()) {
      pi_list = this.findPluginListForExt(entry.ext, entry);
    }
    pi_kind = this.findPluginForKind(entry.kind0, entry);
    return pi_kind != null ? pi_kind.composePlugin(pi_list, entry) : void 0;
  };

  return PluginBaseMap;

})();

module.exports = exports = {
  PluginBaseMap: PluginBaseMap
};
