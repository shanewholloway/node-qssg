// Generated by CoffeeScript 1.6.1
var SiteBuilder, inspect, path, qutil,
  __slice = [].slice;

path = require('path');

qutil = require('./util');

inspect = require('util').inspect;

SiteBuilder = (function() {

  SiteBuilder.prototype.fsTaskQueue = qutil.taskQueue(35);

  function SiteBuilder(rootPath, contentTree) {
    this.contentTree = contentTree;
    this.rootPath = path.resolve(rootPath);
    this.cwd = path.resolve('.');
  }

  SiteBuilder.prototype.build = function(vars, doneBuildFn) {
    var dirTasks, fnList, logStarted, rootOutput, rootPath, tasks, tidUpdate, trackerMap,
      _this = this;
    if (typeof vars === 'function') {
      doneBuildFn = vars;
      vars = null;
    }
    rootPath = this.rootPath;
    rootOutput = Object.create(null, {
      rootPath: {
        value: this.rootPath,
        enumerable: true
      }
    });
    vars = Object.create(vars || null, {
      output: {
        value: rootOutput
      }
    });
    trackerMap = {};
    fnList = [];
    dirTasks = qutil.createTaskTracker(function() {
      _this.fsTaskQueue.extend(fnList);
      return fnList = null;
    });
    tidUpdate = setInterval(this.logTasksUpdate.bind(this, tasks, trackerMap), this.msTasksUpdate || 2000);
    tasks = qutil.createTaskTracker(function() {
      clearInterval(tidUpdate);
      return doneBuildFn();
    });
    logStarted = this.logStarted.bind(this);
    return this.contentTree.visit(function(vkind, contentItem, keyPath) {
      var fullPath, objVars, output, relPath, renderAnswer;
      if (contentItem.renderFn == null) {
        return true;
      }
      relPath = keyPath.join('/');
      fullPath = path.resolve(_this.rootPath, relPath);
      if (vkind === 'tree') {
        _this.fs.makeDirs(fullPath, dirTasks());
      }
      output = Object.create(rootOutput, {
        vkind: {
          value: vkind
        },
        relPath: {
          value: relPath,
          enumerable: true
        },
        fullPath: {
          value: fullPath
        },
        contentItem: {
          value: contentItem
        }
      });
      objVars = Object.create(vars, {
        output: {
          value: output,
          enumerable: true
        }
      });
      renderAnswer = tasks(function() {
        delete trackerMap[relPath];
        return _this.renderAnswerEx.apply(_this, [output].concat(__slice.call(arguments)));
      });
      trackerMap[relPath] = renderAnswer;
      fnList.push(function(taskDone) {
        return _this.fs.stat(output.fullPath, taskDone.wrap(function(err, stat) {
          if (stat != null) {
            output.mtime = stat.mtime;
          }
          logStarted(output);
          return contentItem.renderFn(objVars, renderAnswer);
        }));
      });
      return true;
    });
  };

  SiteBuilder.prototype.fs = qutil.fs;

  SiteBuilder.prototype.renderAnswerEx = function(rx, err, what) {
    var mtime, _ref, _ref1,
      _this = this;
    if ((err != null) && !this.logError(err, rx)) {
      return;
    }
    if (what != null) {
      mtime = (_ref = rx.contentItem) != null ? (_ref1 = _ref.entry) != null ? _ref1.mtime : void 0 : void 0;
      if ((mtime != null) && rx.mtime && mtime <= rx.mtime) {
        this.logUnchanged(rx);
      } else {
        this.fsTaskQueue["do"](function() {
          if (what.pipe != null) {
            what.pipe(_this.fs.createWriteStream(rx.fullPath));
          } else {
            _this.fs.writeFile(rx.fullPath, what);
          }
          return _this.logChanged(rx);
        });
      }
    }
  };

  SiteBuilder.prototype.logPathsFor = function(rx) {
    var _ref, _ref1;
    return {
      dst: path.relative(this.cwd, rx.relPath),
      src: path.relative(this.cwd, ((_ref = rx.contentItem) != null ? (_ref1 = _ref.entry) != null ? _ref1.srcPath : void 0 : void 0) || rx.relPath)
    };
  };

  SiteBuilder.prototype.logStarted = function(rx) {};

  SiteBuilder.prototype.logError = function(err, rx) {
    var paths;
    paths = this.logPathsFor(rx);
    console.error("ERROR['" + paths.src + "'] :: " + err);
  };

  SiteBuilder.prototype.logChanged = function(rx) {
    var paths;
    paths = this.logPathsFor(rx);
    console.error("WRITE['" + paths.src + "'] -- '" + paths.dst + "'");
  };

  SiteBuilder.prototype.logUnchanged = function(rx) {};

  SiteBuilder.prototype.logTasksUpdate = function(tasks, trackerMap) {
    return console.warn("tasks active: " + tasks.active + " waiting on: " + (inspect(Object.keys(trackerMap))));
  };

  return SiteBuilder;

})();

exports.SiteBuilder = SiteBuilder;

exports.createBuilder = function(rootPath, content) {
  return new SiteBuilder(rootPath, content);
};
