// Generated by CoffeeScript 1.6.1
var ContentBaseNode, ContentCollectionMixin, ContentComposite, ContentItem, ContentRoot, ContentTree,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

ContentBaseNode = (function() {

  function ContentBaseNode() {}

  Object.defineProperties(ContentBaseNode.prototype, {
    dependencies: {
      get: function() {
        return this.deps;
      }
    },
    deps: {
      get: function() {
        return this.deps = [];
      }
    }
  });

  ContentBaseNode.prototype.isContentNode = function() {
    return true;
  };

  ContentBaseNode.prototype.init = function(container, options) {
    var k, v, _results;
    this.ctx = this.initCtx(container != null ? container.ctx : void 0);
    if (options != null) {
      _results = [];
      for (k in options) {
        v = options[k];
        _results.push(this[k] = v);
      }
      return _results;
    }
  };

  ContentBaseNode.prototype.initCtx = function(ctx) {
    return ctx || {};
  };

  ContentBaseNode.prototype.visit = function(visitor, keyPath) {
    throw new Error("Subclass responsibility: " + this.constructor.name + "::visit()");
  };

  ContentBaseNode.prototype.renderFn = function(vars, answerFn) {
    return answerFn();
  };

  ContentBaseNode.prototype.compositeWith = function(key, contentItem, container) {
    var comp;
    comp = new ContentComposite(container, key);
    comp.addItem(this.key, this);
    comp.addItem(key, contentItem);
    return comp;
  };

  return ContentBaseNode;

})();

ContentItem = (function(_super) {

  __extends(ContentItem, _super);

  ContentItem.prototype.kind = 'item';

  function ContentItem(container, key) {
    this.key = key;
  }

  ContentItem.prototype.visit = function(visitor, keyPath) {
    if (keyPath == null) {
      keyPath = [];
    }
    return visitor(this.kind, this, keyPath.concat([this.key]));
  };

  return ContentItem;

})(ContentBaseNode);

ContentComposite = (function(_super) {

  __extends(ContentComposite, _super);

  ContentComposite.prototype.kind = 'composite';

  function ContentComposite(container, key) {
    this.key = key;
    this.list = [];
  }

  ContentComposite.prototype.addItem = function(key, item) {
    if (!item.isContentNode()) {
      throw new Error("Can only add ContentItem objects");
    }
    this.list.push(item);
    return item;
  };

  ContentComposite.prototype.compositeWith = function(key, contentItem, container) {
    this.list.push(contentItem);
    return this;
  };

  ContentComposite.prototype.visit = function(visitor, keyPath) {
    var res;
    if (keyPath == null) {
      keyPath = [];
    }
    res = visitor(this.kind, this, keyPath.slice());
    if (res === false) {

    } else {
      return this.visitList(visitor, keyPath);
    }
  };

  ContentComposite.prototype.visitList = function(visitor, keyPath) {
    var each, _i, _len, _ref;
    if (keyPath == null) {
      keyPath = [];
    }
    _ref = this.list;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      each = _ref[_i];
      each.visit(visitor, keyPath);
    }
    return true;
  };

  return ContentComposite;

})(ContentBaseNode);

ContentTree = (function(_super) {

  __extends(ContentTree, _super);

  ContentTree.prototype.kind = 'tree';

  function ContentTree(container, key) {
    this.key = key;
    this.items = {};
  }

  ContentTree.prototype.addItem = function(key, item) {
    var curItem;
    if (!item.isContentNode()) {
      throw new Error("Can only add ContentNode objects");
    }
    if ((curItem = this.items[key]) != null) {
      item = curItem.compositeWith(key, item, this);
    }
    this.items[key] = item;
    return item;
  };

  ContentTree.prototype.visit = function(visitor, keyPath) {
    var res;
    if (keyPath == null) {
      keyPath = [];
    }
    keyPath = keyPath.concat([this.key]);
    res = visitor(this.kind, this, keyPath.slice());
    if (res === false) {

    } else {
      return this.visitItems(visitor, keyPath);
    }
  };

  ContentTree.prototype.visitItems = function(visitor, keyPath) {
    var each, key, _ref;
    if (keyPath == null) {
      keyPath = [];
    }
    _ref = this.items;
    for (key in _ref) {
      each = _ref[key];
      each.visit(visitor, keyPath);
    }
    return true;
  };

  return ContentTree;

})(ContentBaseNode);

ContentRoot = (function(_super) {

  __extends(ContentRoot, _super);

  ContentRoot.prototype.kind = 'root';

  function ContentRoot(key) {
    ContentRoot.__super__.constructor.call(this, null, key);
  }

  return ContentRoot;

})(ContentComposite);

ContentCollectionMixin = (function() {

  function ContentCollectionMixin() {}

  ContentCollectionMixin.prototype.ContentItem = ContentItem;

  ContentCollectionMixin.prototype.ContentTree = ContentTree;

  ContentCollectionMixin.prototype.initCtx = function(ctx) {
    return Object.create(ctx || null);
  };

  ContentCollectionMixin.prototype.newContentEx = function(container, key, argsEx) {
    var item;
    item = new this.ContentItem(container, key);
    if (argsEx != null) {
      item.init.apply(item, [this].concat(__slice.call(argsEx)));
    }
    return item;
  };

  ContentCollectionMixin.prototype.newContent = function() {
    var args, key;
    key = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return this.newContentEx(this, key, args);
  };

  ContentCollectionMixin.prototype.addContent = function() {
    var args, key;
    key = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return this.addItem(key, this.newContentEx(this, key, args));
  };

  ContentCollectionMixin.prototype.newTreeEx = function(container, key, argsEx) {
    var item;
    item = new this.ContentTree(container, key);
    if (argsEx.length != null) {
      item.init.apply(item, [this].concat(__slice.call(argsEx)));
    }
    return item;
  };

  ContentCollectionMixin.prototype.newTree = function() {
    var args, container, key;
    container = arguments[0], key = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    return this.newTree(this, key, args);
  };

  ContentCollectionMixin.prototype.addTree = function() {
    var args, key;
    key = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return this.addItem(key, this.newTree(this, key, args));
  };

  ContentCollectionMixin.mixInto = function(tgtClass) {
    var k, tgt, v, _ref;
    tgt = tgtClass.prototype || tgtClass;
    _ref = this.prototype;
    for (k in _ref) {
      v = _ref[k];
      tgt[k] = v;
    }
  };

  return ContentCollectionMixin;

})();

ContentCollectionMixin.mixInto(ContentTree);

ContentCollectionMixin.mixInto(ContentComposite);

module.exports = {
  ContentBaseNode: ContentBaseNode,
  ContentCollectionMixin: ContentCollectionMixin,
  ContentItem: ContentItem,
  ContentTree: ContentTree,
  ContentRoot: ContentRoot,
  createRoot: function() {
    return new ContentRoot();
  }
};
