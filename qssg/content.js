// Generated by CoffeeScript 1.6.1
var ContentBaseNode, ContentCollectionMixin, ContentComposite, ContentItem, ContentRoot, ContentTree, CtxTree,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ContentBaseNode = (function() {

  function ContentBaseNode() {}

  Object.defineProperties(ContentBaseNode.prototype, {
    dependencies: {
      get: function() {
        return this.deps;
      }
    },
    deps: {
      get: function() {
        return this.deps = [];
      }
    }
  });

  ContentBaseNode.prototype.isContentNode = true;

  ContentBaseNode.prototype.init = function(container) {
    return this.ctx = this.initCtx(container != null ? container.ctx : void 0);
  };

  ContentBaseNode.prototype.initCtx = function(ctx_next) {
    return ctx_next || {};
  };

  ContentBaseNode.prototype.visit = function(visitor, keyPath) {
    throw new Error("Subclass responsibility: " + this.constructor.name + "::visit()");
  };

  ContentBaseNode.prototype.renderFn = function(vars, answerFn) {
    return answerFn();
  };

  ContentBaseNode.prototype.compositeWith = function(key, contentItem, container) {
    var comp;
    comp = new ContentComposite(container, key);
    comp.addItem(this.key, this);
    comp.addItem(key, contentItem);
    return comp;
  };

  ContentBaseNode.prototype.touch = function(arg) {
    if (arg == null) {
      arg = true;
    }
    if (arg === 0) {
      delete this.mtime;
    } else if (arg === true) {
      this.mtime = new Date();
    } else {
      arg = Math.max(this.mtime || 0, arg || 0);
      this.mtime = new Date(arg);
    }
    return this.mtime;
  };

  return ContentBaseNode;

})();

ContentItem = (function(_super) {

  __extends(ContentItem, _super);

  ContentItem.prototype.kind = 'item';

  function ContentItem(container, key) {
    this.key = key;
    this.init(container);
  }

  ContentItem.prototype.initCtx = function(ctx_next) {
    return ctx_next;
  };

  ContentItem.prototype.visit = function(visitor, keyPath) {
    if (keyPath == null) {
      keyPath = [];
    }
    return visitor(this.kind, this, keyPath.concat([this.key]));
  };

  return ContentItem;

})(ContentBaseNode);

ContentComposite = (function(_super) {

  __extends(ContentComposite, _super);

  ContentComposite.prototype.kind = 'composite';

  function ContentComposite(container, key) {
    this.key = key;
    this.list = [];
    this.init(container);
  }

  ContentComposite.prototype.addItem = function(key, item) {
    if (!item.isContentNode) {
      throw new Error("Can only add ContentItem objects");
    }
    this.list.push(item);
    return item;
  };

  ContentComposite.prototype.compositeWith = function(key, contentItem, container) {
    this.list.push(contentItem);
    return this;
  };

  ContentComposite.prototype.visit = function(visitor, keyPath) {
    var res;
    if (keyPath == null) {
      keyPath = [];
    }
    res = visitor(this.kind, this, keyPath.slice());
    if (res === false) {

    } else {
      return this.visitList(visitor, keyPath);
    }
  };

  ContentComposite.prototype.visitList = function(visitor, keyPath) {
    var each, _i, _len, _ref;
    if (keyPath == null) {
      keyPath = [];
    }
    _ref = this.list;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      each = _ref[_i];
      each.visit(visitor, keyPath);
    }
    return true;
  };

  return ContentComposite;

})(ContentBaseNode);

ContentRoot = (function(_super) {

  __extends(ContentRoot, _super);

  ContentRoot.prototype.kind = 'root';

  function ContentRoot(key) {
    ContentRoot.__super__.constructor.call(this, null, key);
  }

  return ContentRoot;

})(ContentComposite);

ContentTree = (function(_super) {

  __extends(ContentTree, _super);

  ContentTree.prototype.kind = 'tree';

  function ContentTree(container, key) {
    this.key = key;
    this.items = {};
    this.init(container);
  }

  ContentTree.prototype.addItem = function(key, item) {
    var curItem;
    if (!item.isContentNode) {
      throw new Error("Can only add ContentNode objects");
    }
    if ((curItem = this.items[key]) != null) {
      item = curItem.compositeWith(key, item, this);
    }
    this.items[key] = item;
    return item;
  };

  ContentTree.prototype.getItem = function(key) {
    return this.items[key];
  };

  ContentTree.prototype.visit = function(visitor, keyPath) {
    var res;
    if (keyPath == null) {
      keyPath = [];
    }
    keyPath = keyPath.concat([this.key]);
    res = visitor(this.kind, this, keyPath.slice());
    if (res === false) {

    } else {
      return this.visitItems(visitor, keyPath);
    }
  };

  ContentTree.prototype.visitItems = function(visitor, keyPath) {
    var each, key, _ref;
    if (keyPath == null) {
      keyPath = [];
    }
    _ref = this.items;
    for (key in _ref) {
      each = _ref[key];
      each.visit(visitor, keyPath);
    }
    return true;
  };

  return ContentTree;

})(ContentBaseNode);

CtxTree = (function(_super) {

  __extends(CtxTree, _super);

  function CtxTree() {
    return CtxTree.__super__.constructor.apply(this, arguments);
  }

  CtxTree.prototype.kind = 'ctx_tree';

  CtxTree.prototype.isCtxTree = true;

  CtxTree.prototype.initCtx = function(ctx_parent) {
    var ctx, ctx_next;
    if (ctx_parent == null) {
      return {};
    }
    ctx_next = ctx_parent[this.key];
    ctx = Object.create(ctx_next || null, {
      ctx_next: {
        value: ctx_next
      }
    });
    return ctx_parent[this.key] = ctx;
  };

  CtxTree.prototype.adaptMatchKind = function(matchKind) {
    return 'context';
  };

  return CtxTree;

})(ContentTree);

ContentCollectionMixin = (function() {

  function ContentCollectionMixin() {}

  ContentCollectionMixin.prototype.ContentItem = ContentItem;

  ContentCollectionMixin.prototype.ContentTree = ContentTree;

  ContentCollectionMixin.prototype.CtxTree = CtxTree;

  ContentCollectionMixin.prototype.initCtx = function(ctx_next) {
    return Object.create(ctx_next || null, {
      ctx_next: {
        value: ctx_next
      }
    });
  };

  ContentCollectionMixin.prototype.newContentEx = function(container, key) {
    return new this.ContentItem(container, key);
  };

  ContentCollectionMixin.prototype.newContent = function(key) {
    return this.newContentEx(this, key);
  };

  ContentCollectionMixin.prototype.addContent = function(key) {
    return this.addItem(key, this.newContentEx(this, key));
  };

  ContentCollectionMixin.prototype.getContent = function(key) {
    var item;
    if ((item = typeof this.getItem === "function" ? this.getItem(key) : void 0) == null) {
      item = this.addContent(key);
    }
    return item;
  };

  ContentCollectionMixin.prototype.newTreeEx = function(container, key) {
    return new this.ContentTree(container, key);
  };

  ContentCollectionMixin.prototype.newTree = function(key) {
    return this.newTreeEx(this, key);
  };

  ContentCollectionMixin.prototype.addTree = function(key) {
    return this.addItem(key, this.newTreeEx(this, key));
  };

  ContentCollectionMixin.prototype.newCtxTreeEx = function(container, key) {
    return new this.CtxTree(container, key);
  };

  ContentCollectionMixin.prototype.newCtxTree = function(key) {
    return this.newCtxTreeEx(this, key);
  };

  ContentCollectionMixin.mixInto = function(tgtClass) {
    var k, tgt, v, _ref;
    tgt = tgtClass.prototype || tgtClass;
    _ref = this.prototype;
    for (k in _ref) {
      v = _ref[k];
      tgt[k] = v;
    }
  };

  return ContentCollectionMixin;

})();

ContentCollectionMixin.mixInto(ContentTree);

ContentCollectionMixin.mixInto(ContentComposite);

module.exports = {
  ContentBaseNode: ContentBaseNode,
  ContentCollectionMixin: ContentCollectionMixin,
  ContentItem: ContentItem,
  ContentTree: ContentTree,
  ContentRoot: ContentRoot,
  createRoot: function() {
    return new ContentRoot();
  }
};
