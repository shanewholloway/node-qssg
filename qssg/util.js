// Generated by CoffeeScript 1.4.0
var createTaskTracker, fs, funcQueues, path,
  __slice = [].slice;

fs = require('fs');

path = require('path');

funcQueues = require('./funcQueues');

(function() {
  var k, v, _results;
  _results = [];
  for (k in funcQueues) {
    v = funcQueues[k];
    _results.push(exports[k] = v);
  }
  return _results;
})();

fs = Object.create(fs);

fs.makeDirs = function(aPath, mode, callback) {
  var step;
  if (callback == null) {
    callback = function() {};
  }
  if (typeof mode === 'function') {
    callback = mode;
    mode = void 0;
  }
  step = function(aPath, next) {
    return fs.exists(aPath, function(exists) {
      if (exists) {
        return next(null, false);
      }
      return step(path.dirname(aPath), function() {
        return fs.mkdir(aPath, mode, function(err) {
          return next(err, true);
        });
      });
    });
  };
  return step(path.resolve(aPath), callback);
};

fs.isChanged = function(aPath, mtime, answerFn) {
  var stat;
  if (mtime) {
    if (!(answerFn != null)) {
      stat = fs.statSync(aPath);
      return !(stat != null) || stat.mtime < mtime;
    } else {
      fs.stat(aPath, function(err, stat) {
        return answerFn(!(stat != null) || (stat.mtime < mtime));
      });
    }
  } else {
    if (typeof answerFn === "function") {
      answerFn(true);
    }
    return true;
  }
};

fs.whenChanged = function(aPath, mtime, answerFn) {
  return fs.isChanged(aPath, mtime, function(changed) {
    if (changed) {
      return answerFn();
    }
  });
};

exports.fs = fs;

createTaskTracker = function() {
  var self;
  self = funcQueues.closureQueue.apply(funcQueues, arguments);
  self.done = funcQueues.functionList();
  self.add = function() {
    var args, task;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    task = self();
    if ('function' === typeof args[args.length - 1]) {
      task = task.wrap(args.pop());
    }
    if (args.length != null) {
      task.args = args;
    }
    return task;
  };
  self.defer = function(ms, callback) {
    var task;
    if ('function' === typeof ms) {
      callback = ms;
      ms = null;
    }
    task = self(callback);
    if (ms != null) {
      setTimeout(task, ms);
    } else {
      process.nextTick(task);
    }
    return task;
  };
  return self;
};

exports.createTaskTracker = createTaskTracker;
