// Generated by CoffeeScript 1.4.0
var PluginFactory, PluginMap, exports, g_plugins, qpluginTypes, splitExt,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

qpluginTypes = require('./pluginTypes');

splitExt = qpluginTypes.splitExt, PluginFactory = qpluginTypes.PluginFactory;

exports = module.exports = Object.create(qpluginTypes);

PluginMap = (function(_super) {

  __extends(PluginMap, _super);

  function PluginMap() {
    PluginMap.__super__.constructor.call(this);
    Object.defineProperty(this, 'map', {
      value: {}
    });
    this.invalidate();
    this["default"] = this.addStaticType();
  }

  PluginMap.prototype.clone = function() {
    var map;
    map = Object.create(this.map);
    return Object.create(this, {
      map: {
        value: map
      }
    }).invalidate();
  };

  PluginMap.prototype.invalidate = function() {
    this._cache = Object.create(this.map);
    return this;
  };

  PluginMap.prototype.findPlugin = function(entry, matchKey) {
    var ext, pi;
    ext = entry.ext;
    if (entry.kind0 != null) {
      (ext = ext.slice(0)).unshift(entry.kind0 + ':');
    }
    if (!((pi = this._cache[ext]) != null)) {
      this._cache[ext] = pi = this.findPluginForExt(ext);
    }
    if (pi.adapt != null) {
      pi = pi.adapt(this, entry, matchKey);
    }
    return pi || this["default"];
  };

  PluginMap.prototype.findPluginForExt = function(ext) {
    var i, n, pi, pi_list;
    n = ext.length;
    pi = this.map[ext[n - 1]];
    if (n > 1) {
      pi_list = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = _ref = n - 2; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
          _results.push(this._lookupPair(ext[i], ext[i + 1]));
        }
        return _results;
      }).call(this);
      pi_list[0] || (pi_list[0] = pi);
      i = pi_list.indexOf(void 0);
      if (~i) {
        pi_list.splice(i);
      }
      if (pi_list.length > 1) {
        pi = this.asPluginPipeline(pi_list, ext);
      } else {
        pi = pi_list.pop();
      }
    }
    return pi || this["default"];
  };

  PluginMap.prototype._lookupPair = function(fmt, ext) {
    return this.map[[fmt, ext]] || this.map[[fmt, '*']] || this.map[['*', ext]];
  };

  PluginMap.prototype.addPlugin = function(extList, plugin) {
    var ext, _i, _len;
    if (!(typeof plugin.isPlugin === "function" ? plugin.isPlugin() : void 0)) {
      throw new Error("Expecting a plugin instance");
    }
    if (extList.split != null) {
      extList = [extList];
    }
    for (_i = 0, _len = extList.length; _i < _len; _i++) {
      ext = extList[_i];
      this.map[splitExt(ext)] = plugin;
    }
    return this.invalidate();
  };

  PluginMap.prototype.addPluginForKeys = function(plugin, input, output) {
    var i, o, _i, _j, _k, _len, _len1, _len2;
    if (!(typeof plugin.isPlugin === "function" ? plugin.isPlugin() : void 0)) {
      throw new Error("Expecting a plugin instance");
    }
    input = splitExt(input);
    if (output != null) {
      output = splitExt(output);
    }
    if (output != null) {
      for (_i = 0, _len = input.length; _i < _len; _i++) {
        i = input[_i];
        for (_j = 0, _len1 = output.length; _j < _len1; _j++) {
          o = output[_j];
          this.map[[o, i]] = plugin;
        }
      }
    } else {
      for (_k = 0, _len2 = input.length; _k < _len2; _k++) {
        i = input[_k];
        this.map[i] = plugin;
      }
    }
    return this;
  };

  return PluginMap;

})(PluginFactory);

g_plugins = new PluginMap();

exports.PluginMap = PluginMap;

exports.plugins = g_plugins;
