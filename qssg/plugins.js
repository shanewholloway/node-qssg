// Generated by CoffeeScript 1.6.1
var PluginMap, exports, pluginTypes, qpluginMap, qpluginTypes, splitExt,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

qpluginMap = require('./pluginMap');

qpluginTypes = require('./pluginTypes');

module.exports = exports = Object.create(qpluginTypes);

splitExt = qpluginTypes.splitExt, pluginTypes = qpluginTypes.pluginTypes;

PluginMap = (function(_super) {

  __extends(PluginMap, _super);

  Object.defineProperties(PluginMap.prototype, {
    pluginTypes: {
      value: pluginTypes
    }
  });

  function PluginMap() {
    this._initPluginMaps();
    this["default"] = this.addStaticType();
  }

  PluginMap.prototype.findPlugin = function(entry, matchKind) {
    var map, pi, pi_kind;
    map = entry.isDirectory() ? this.dirsMap : this.filesMap;
    pi = map.findPluginForExt(entry, matchKind);
    pi_kind = map.findPluginForKind(entry.kind0, entry, matchKind);
    if (pi_kind != null) {
      pi = pi_kind.composePlugin(pi, entry, matchKind);
    }
    if ((pi || (pi = this["default"])).adapt != null) {
      pi = pi.adapt(this, entry, matchKind);
    }
    return pi;
  };

  PluginMap.prototype.add = function() {
    var pi, plugins, _i, _len;
    plugins = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = plugins.length; _i < _len; _i++) {
      pi = plugins[_i];
      pi.registerPluginOn(this);
    }
    return this;
  };

  PluginMap.prototype.addPluginForExtIO = function(plugin, ext, input, output) {
    if (ext != null) {
      this.addPluginForKeys(plugin, ext);
    }
    if (output != null) {
      if (ext != null) {
        this.addPluginForKeys(plugin, ext, output);
      }
      if (input != null) {
        return this.addPluginForKeys(plugin, input, output);
      }
    }
  };

  PluginMap.prototype.addPluginForKeys = function(plugin, input, output) {
    var i, o, _i, _j, _k, _len, _len1, _len2;
    if (!plugin.isPlugin) {
      throw new Error("Expecting a plugin instance");
    }
    input = splitExt(input);
    if (output != null) {
      output = splitExt(output);
    }
    if (output != null) {
      for (_i = 0, _len = input.length; _i < _len; _i++) {
        i = input[_i];
        for (_j = 0, _len1 = output.length; _j < _len1; _j++) {
          o = output[_j];
          this.addPluginAt([o, i], plugin);
        }
      }
    } else {
      for (_k = 0, _len2 = input.length; _k < _len2; _k++) {
        i = input[_k];
        this.addPluginAt(i, plugin);
      }
    }
    return this.invalidate();
  };

  PluginMap.prototype.addPluginTypeEx = function(key, args) {
    var cls, pi;
    cls = this.pluginTypes[key];
    if (!cls) {
      throw new Error("Plugin for type '" + key + "' not found");
    }
    pi = new cls;
    pi.init.apply(pi, args);
    this.add(pi);
    return pi;
  };

  PluginMap.prototype.addPluginType = function() {
    var args, key;
    key = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return this.addPluginTypeEx(key, args);
  };

  PluginMap.prototype.addFileType = function(obj) {
    if (obj.compile != null) {
      return this.addPluginTypeEx('compile_render', arguments);
    }
    if (obj.render != null) {
      return this.addPluginTypeEx('rendered', arguments);
    }
    throw new Error("Unable to find a `compile()` or `render()` method");
  };

  PluginMap.prototype.addStaticType = function() {
    return this.addPluginTypeEx('static', arguments);
  };

  PluginMap.prototype.addCompiledType = function() {
    return this.addPluginTypeEx('compiled', arguments);
  };

  PluginMap.prototype.addRenderedType = function() {
    return this.addPluginTypeEx('rendered', arguments);
  };

  PluginMap.prototype.addModuleType = function() {
    return this.addPluginTypeEx('module', arguments);
  };

  return PluginMap;

})(qpluginMap.PluginCompositeMap);

exports.createPluginMap = function() {
  return new PluginMap();
};

exports.plugins = exports.createPluginMap();

exports.PluginMap = PluginMap;
