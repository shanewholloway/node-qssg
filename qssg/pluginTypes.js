// Generated by CoffeeScript 1.6.1
var BasePlugin, BasicPlugin, BasicPlugin0, CompileRenderPlugin, CompiledPlugin, ModulePlugin, PipelinePlugin, RenderedPlugin, StaticPlugin, makeRefError, pluginTypes, splitExt,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

makeRefError = function(key) {
  return {
    get: function() {
      throw new Error("Reference '" + key + "' instead");
    },
    set: function() {
      throw new Error("Reference '" + key + "' instead");
    }
  };
};

splitExt = function(ext) {
  if (ext.split != null) {
    ext = ext.split(/[. ;,]+/);
  }
  if (!ext[0]) {
    ext.shift();
  }
  if (!ext[ext.length - 1]) {
    ext.pop();
  }
  return ext;
};

exports.splitExt = splitExt;

exports.pluginTypes = pluginTypes = {};

BasePlugin = (function() {

  function BasePlugin() {}

  Object.defineProperties(BasePlugin.prototype, {
    pluginName: {
      get: function() {
        return this.constructor.name;
      }
    },
    inputs: makeRefError('input'),
    outputs: makeRefError('output')
  });

  BasePlugin.prototype.init = function(opt) {
    var k, v;
    if (opt != null) {
      for (k in opt) {
        if (!__hasProp.call(opt, k)) continue;
        v = opt[k];
        this[k] = v;
      }
    }
    return this;
  };

  BasePlugin.prototype.inspect = function() {
    if (this.name != null) {
      return "«" + this.name + " plugin»";
    } else if (this.input != null) {
      return "«" + this.pluginName + " '" + this.input + "'»";
    } else {
      return "«" + this.pluginName + "»";
    }
  };

  BasePlugin.prototype.toString = function() {
    return this.inspect();
  };

  BasePlugin.prototype.isPlugin = true;

  BasePlugin.prototype.splitExt = splitExt;

  BasePlugin.prototype.defaultExt = function() {
    return this.splitExt(this.output)[0];
  };

  BasePlugin.prototype.registerPluginOn = function(pluginMap) {
    return pluginMap.addPluginForExtIO(this, this.ext, this.intput, this.output);
  };

  BasePlugin.prototype.pluginProtocol = '\
    content variable composite compositeDir\
    rename bindContent\
    '.split(' ');

  BasePlugin.prototype.content = function(entry, vars, answerFn) {
    return this.notImplemented('content', entry, answerFn);
  };

  BasePlugin.prototype.simple = function(entry, callback) {
    return this.notImplemented('simple', entry, callback);
  };

  BasePlugin.prototype.composite = function(entry, callback) {
    return this.notImplemented('composite', entry, callback);
  };

  BasePlugin.prototype.context = function(entry, callback) {
    return this.notImplemented('context', entry, callback);
  };

  BasePlugin.prototype.simpleDir = function(entry, callback) {
    entry.walk();
    return this.notImplemented('simpleDir', entry, callback);
  };

  BasePlugin.prototype.compositeDir = function(entry, callback) {
    entry.walk();
    return this.notImplemented('compositeDir', entry, callback);
  };

  BasePlugin.prototype.contextDir = function(entry, callback) {
    entry.newCtxTree();
    entry.walk();
    return this.notImplemented('contextDir', entry, callback);
  };

  if (0) {
    ({
      adapt: function(pluginMap, entry, matchKind) {
        return this;
      },
      rename: function(entry) {
        return entry;
      }
    });
  }

  BasePlugin.prototype.bindContent = function(entry, callback) {
    var contentItem,
      _this = this;
    contentItem = entry.contentItem || entry.addContent();
    contentItem.renderFn = function(vars, answerFn) {
      return _this.content(entry, vars, answerFn);
    };
    return callback();
  };

  BasePlugin.prototype.notImplemented = function(protocolMethod, entry, callback) {
    var err;
    err = "" + this + "::" + protocolMethod + "() not implemented for {entry: '" + entry.srcRelPath + "'}";
    callback(new Error(err));
  };

  return BasePlugin;

})();

BasicPlugin0 = (function(_super) {

  __extends(BasicPlugin0, _super);

  function BasicPlugin0() {
    return BasicPlugin0.__super__.constructor.apply(this, arguments);
  }

  BasicPlugin0.prototype.compositeDir = function(entry, callback) {
    entry.walk();
    return callback();
  };

  BasicPlugin0.prototype.composite = function(entry, callback) {
    return this.bindContent(entry, callback);
  };

  BasicPlugin0.prototype.renameForFormat = function(entry) {
    var ext0;
    ext0 = entry.ext.pop();
    if (!entry.ext.length) {
      entry.ext.push(this.defaultExt());
    }
    return entry;
  };

  return BasicPlugin0;

})(BasePlugin);

BasicPlugin = (function(_super) {

  __extends(BasicPlugin, _super);

  function BasicPlugin() {
    return BasicPlugin.__super__.constructor.apply(this, arguments);
  }

  BasicPlugin.prototype.content = function(entry, vars, answerFn) {
    return entry.read(answerFn);
  };

  BasicPlugin.prototype.variable = function(entry, callback) {
    return entry.read(callback);
  };

  return BasicPlugin;

})(BasicPlugin0);

exports.BasePlugin = BasePlugin;

exports.BasicPlugin0 = BasicPlugin0;

exports.BasicPlugin = BasicPlugin;

PipelinePlugin = (function(_super) {

  __extends(PipelinePlugin, _super);

  function PipelinePlugin(pluginList, ext) {
    this.pluginList = pluginList;
  }

  PipelinePlugin.prototype.rename = function(entry) {
    var pi, _i, _len, _ref;
    _ref = this.pluginList;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      pi = _ref[_i];
      if (pi.rename != null) {
        entry = pi.rename(entry);
      }
    }
    return entry;
  };

  PipelinePlugin.prototype.adapt = function(pluginMap, entry, matchKind) {
    var self,
      _this = this;
    self = Object.create(this);
    self.pluginList = this.pluginList.map(function(pi) {
      if (pi.adapt != null) {
        pi = pi.adapt(pluginMap, entry, matchKind);
      }
      return pi;
    });
    return self;
  };

  PipelinePlugin.prototype.content = function(entry, vars, answerFn) {
    var answerNext, pluginList, renderOverlay;
    pluginList = this.pluginList.slice();
    renderOverlay = function(err, entry_) {
      var pi;
      if (err != null) {
        return answerFn(err);
      } else {
        pi = pluginList.shift();
        pi.content(entry_, vars, answerNext);
      }
    };
    answerNext = function(err, what) {
      if (err != null) {
        return answerFn(err);
      } else if (pluginList.length > 0) {
        try {
          return entry.overlaySource(what, renderOverlay);
        } catch (err) {
          return answerFn(err);
        }
      } else {
        return answerFn.apply(null, arguments);
      }
    };
    return renderOverlay(null, entry, entry.readSync());
  };

  return PipelinePlugin;

})(BasicPlugin);

exports.PipelinePlugin = PipelinePlugin;

StaticPlugin = (function(_super) {

  __extends(StaticPlugin, _super);

  function StaticPlugin() {
    return StaticPlugin.__super__.constructor.apply(this, arguments);
  }

  StaticPlugin.prototype.init = function() {
    var k, opt, options, v, _i, _len;
    options = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    this.extList = [];
    for (_i = 0, _len = options.length; _i < _len; _i++) {
      opt = options[_i];
      if (opt.length != null) {
        this.extList.push(splitExt(opt));
      } else {
        for (k in opt) {
          if (!__hasProp.call(opt, k)) continue;
          v = opt[k];
          this[k] = v;
        }
      }
    }
    return this;
  };

  StaticPlugin.prototype.registerPluginOn = function(pluginMap) {
    var ext, _i, _len, _ref, _results;
    pluginMap.addPluginForExtIO(this, this.ext, this.intput, this.output);
    _ref = this.extList || [];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      ext = _ref[_i];
      if (ext.length === 1) {
        pluginMap.addPluginForKeys(this, ext);
        _results.push(pluginMap.addPluginForKeys(this, ext, '*'));
      } else if (ext.length === 2) {
        _results.push(pluginMap.addPluginForKeys(this, ext.slice(1), ext.slice(0, 1)));
      } else {
        _results.push(console.warn("Ignoreing invalid static extension " + ext));
      }
    }
    return _results;
  };

  StaticPlugin.prototype.content = function(entry, vars, callback) {
    entry.touch(false);
    return callback(null, entry.readStream());
  };

  StaticPlugin.prototype.variable = function(entry, callback) {
    return entry.read(callback);
  };

  return StaticPlugin;

})(BasicPlugin);

pluginTypes["static"] = StaticPlugin;

exports.StaticPlugin = StaticPlugin;

RenderedPlugin = (function(_super) {

  __extends(RenderedPlugin, _super);

  function RenderedPlugin() {
    return RenderedPlugin.__super__.constructor.apply(this, arguments);
  }

  RenderedPlugin.prototype.rename = BasicPlugin.prototype.renameForFormat;

  RenderedPlugin.prototype.adapt = function(pluginMap, entry, matchKind) {
    return Object.create(this);
  };

  RenderedPlugin.prototype.content = function(entry, vars, callback) {
    return this.renderEntry(entry.extendVars(vars), callback);
  };

  RenderedPlugin.prototype.variable = function(entry, callback) {
    return this.renderEntry(entry, entry.extendVars(), callback);
  };

  RenderedPlugin.prototype.renderEntry = function(entry, vars, callback) {
    var _this = this;
    if (this.renderFile != null) {
      this.renderFile(entry, entry.srcPath, vars, callback);
    } else if (this.render != null) {
      entry.read(function(err, data) {
        if (data != null) {
          return _this.render(entry, data, vars, callback);
        } else {
          return callback(err);
        }
      });
    } else if (this.compileEntry != null) {
      this.compileEntry(entry, vars, function(err, boundRenderFn) {
        if (boundRenderFn != null) {
          return boundRenderFn(vars, callback);
        } else {
          return callback(err);
        }
      });
    } else {
      this.notImplemented('render', entry, callback);
    }
  };

  return RenderedPlugin;

})(BasicPlugin);

pluginTypes.rendered = RenderedPlugin;

exports.RenderedPlugin = RenderedPlugin;

CompiledPlugin = (function(_super) {

  __extends(CompiledPlugin, _super);

  function CompiledPlugin() {
    return CompiledPlugin.__super__.constructor.apply(this, arguments);
  }

  CompiledPlugin.prototype.rename = BasicPlugin.prototype.renameForFormat;

  CompiledPlugin.prototype.adapt = function(pluginMap, entry, matchKind) {
    return Object.create(this);
  };

  CompiledPlugin.prototype.variable = function(entry, callback) {
    return this.compileEntry(entry, entry.extendVars(), callback);
  };

  CompiledPlugin.prototype.compileEntry = function(entry, vars, callback) {
    var _this = this;
    if (this.compileFile != null) {
      this.compileFile(entry, entry.srcPath, vars, callback);
    } else if (this.compile != null) {
      entry.read(function(err, data) {
        if (data != null) {
          return _this.compile(entry, data, vars, callback);
        } else {
          return callback(err, data);
        }
      });
    } else {
      this.notImplemented('compile', entry, callback);
    }
  };

  return CompiledPlugin;

})(BasicPlugin);

pluginTypes.compiled = CompiledPlugin;

exports.CompiledPlugin = CompiledPlugin;

CompileRenderPlugin = (function(_super) {

  __extends(CompileRenderPlugin, _super);

  function CompileRenderPlugin() {
    return CompileRenderPlugin.__super__.constructor.apply(this, arguments);
  }

  CompileRenderPlugin.prototype.rename = BasicPlugin.prototype.renameForFormat;

  CompileRenderPlugin.prototype.adapt = function(pluginMap, entry, matchKind) {
    return Object.create(this);
  };

  CompileRenderPlugin.prototype.content = RenderedPlugin.prototype.content;

  CompileRenderPlugin.prototype.renderEntry = RenderedPlugin.prototype.renderEntry;

  CompileRenderPlugin.prototype.variable = CompiledPlugin.prototype.variable;

  CompileRenderPlugin.prototype.compileEntry = CompiledPlugin.prototype.compileEntry;

  return CompileRenderPlugin;

})(BasicPlugin);

pluginTypes.compile_render = CompileRenderPlugin;

exports.CompileRenderPlugin = CompileRenderPlugin;

ModulePlugin = (function(_super) {

  __extends(ModulePlugin, _super);

  function ModulePlugin() {
    return ModulePlugin.__super__.constructor.apply(this, arguments);
  }

  ModulePlugin.prototype.rename = BasicPlugin.prototype.renameForFormat;

  ModulePlugin.prototype.notImplemented = function(protocolMethod, entry, callback) {
    var err;
    err = "Module '" + entry.srcRelPath + "' does not implement `" + protocolMethod + "()`";
    callback(new Error(err));
  };

  ModulePlugin.prototype.adapt = function(pluginMap, entry, matchKind) {
    var meth, mod, nsMod, self, _i, _len, _ref;
    nsMod = {
      entry: entry,
      matchKind: matchKind,
      pluginMap: pluginMap,
      host: this
    };
    if (!this.accept(entry, nsMod)) {
      return;
    }
    nsMod.host = self = Object.create(this);
    mod = self.load(entry, nsMod);
    if (mod == null) {
      return;
    }
    _ref = this.pluginProtocol;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      meth = _ref[_i];
      if (mod[meth] != null) {
        self[meth] = mod[meth];
      }
    }
    return self;
  };

  ModulePlugin.prototype.accept = function(entry, nsMod) {
    return !entry.ext.some(function(e) {
      return e.match(/\d/);
    });
  };

  ModulePlugin.prototype.result = function(mod, nsMod) {
    return mod;
  };

  ModulePlugin.prototype.error = function(err, nsMod) {
    console.error("\nModule '" + nsMod.entry.srcRelPath + "' loading encountered an error");
    console.error(err.stack || err);
    return null;
  };

  ModulePlugin.prototype.load = function(entry, nsMod) {
    var mod;
    try {
      mod = entry.loadModule();
      if (mod.initPlugin != null) {
        mod = (typeof mod.initPlugin === "function" ? mod.initPlugin(nsMod) : void 0) || mod;
      }
      return this.result(mod, nsMod);
    } catch (err) {
      return this.error(err, nsMod);
    }
  };

  return ModulePlugin;

})(BasePlugin);

pluginTypes.module = ModulePlugin;

exports.ModulePlugin = ModulePlugin;
