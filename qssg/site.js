// Generated by CoffeeScript 1.6.1
var MatchEntry, MatchingWalker, Site, SiteBuilder, qcontent, qplugins, qrules, tromp,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

tromp = require('tromp');

qplugins = require('./plugins');

qrules = require('./rules');

qcontent = require('./content');

SiteBuilder = require('./builder').SiteBuilder;

MatchEntry = require('./entry').MatchEntry;

MatchingWalker = (function(_super) {

  __extends(MatchingWalker, _super);

  function MatchingWalker(ruleset, tasks) {
    this.ruleset = ruleset;
    this.tasks = tasks;
    MatchingWalker.__super__.constructor.call(this, {
      autoWalk: false
    });
    Object.defineProperty(this, '_self_', {
      value: this
    });
  }

  MatchingWalker.prototype.instance = function(content, pluginMap) {
    return Object.create(this._self_, {
      content: {
        value: content
      },
      pluginMap: {
        value: pluginMap || this.pluginMap
      }
    });
  };

  MatchingWalker.prototype.walkListing = function(listing) {
    var entry, tree;
    if ((entry = listing.node.entry) != null) {
      if ((tree = entry.tree) == null) {
        tree = entry.addContentTree();
      }
      return this.instance(tree, entry.pluginMap);
    }
    return this;
  };

  MatchingWalker.prototype.walkRootContent = function(aPath, content, pluginMap) {
    return this.instance(content, pluginMap).walk(aPath);
  };

  MatchingWalker.prototype.walkNotify = function() {
    var args, op, _ref;
    op = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return (_ref = this["_op_" + op]) != null ? _ref.apply(this, args) : void 0;
  };

  MatchingWalker.prototype._op_dir = function(entry) {
    entry = new MatchEntry(entry, this.content, this.pluginMap);
    return this.ruleset.matchRules(entry, this);
  };

  MatchingWalker.prototype._op_file = function(entry) {
    entry = new MatchEntry(entry, this.content, this.pluginMap);
    return this.ruleset.matchRules(entry, this);
  };

  MatchingWalker.prototype.match = function(entry, matchKind) {
    var pi;
    pi = this.pluginMap.findPlugin(entry, matchKind);
    return console.log('match:', [matchKind, entry, pi]);
  };

  return MatchingWalker;

})(tromp.WalkRoot);

Site = (function() {

  Object.defineProperties(Site.prototype, {
    site: {
      get: function() {
        return this;
      }
    }
  });

  function Site(opt, plugins) {
    if (opt == null) {
      opt = {};
    }
    this.meta = Object.create(opt.meta || this.meta || null);
    this.ctx = Object.create(opt.ctx || null);
    this.content = qcontent.createRoot();
    this._initPlugins(opt, plugins);
    this._initWalker(opt);
  }

  Site.prototype._initWalker = function(opt) {
    var ruleset;
    if (opt == null) {
      opt = {};
    }
    ruleset = qrules.classifier();
    this.initMatchRuleset(ruleset, qrules);
    this.walker = new MatchingWalker(ruleset, this.tasks);
    this.walker.reject(opt.reject || /node_modules/);
    if (opt.accept != null) {
      this.walker.accept(opt.accept);
    }
    if (opt.filter != null) {
      this.walker.filter(opt.filter);
    }
    this.initWalker(this.walker);
    return this;
  };

  Site.prototype.initWalker = function(walker) {};

  Site.prototype.initMatchRuleset = function(ruleset, qrules) {
    return qrules.standardRuleset(ruleset);
  };

  Site.prototype.plugins = qplugins.plugins.clone();

  Site.prototype._initPlugins = function(opt, plugins) {
    this.plugins = this.plugins.clone();
    if (opt.plugins != null) {
      this.plugins.merge(opt.plugins);
    }
    if (plugins != null) {
      return this.plugins.merge(plugins);
    }
  };

  Site.prototype.walk = function(aPath, opt) {
    var plugins, tree;
    if (opt == null) {
      opt = {};
    }
    if (opt.plugins != null) {
      plugins = this.plugins.clone();
      plugins.merge(opt.plugins);
    } else {
      plugins = this.plugins;
    }
    tree = null;
    return this.walker.walkRootContent(aPath, tree, plugins);
  };

  Site.prototype.build = function(rootPath, vars, done) {
    var bldr;
    if (typeof vars === 'function') {
      done = vars;
      vars = null;
    }
    vars = Object.create(vars || null, {
      meta: {
        value: this.meta
      }
    });
    bldr = new SiteBuilder(rootPath, this.content);
    this.done(function() {
      return bldr.build(vars, done);
    });
    return bldr;
  };

  Site.prototype.done = function(done) {
    var tid,
      _this = this;
    if (this.isDone()) {
      return done();
    }
    return tid = setInterval(function() {
      if (!_this.isDone()) {
        return;
      }
      clearInterval(tid);
      return done();
    }, 10);
  };

  Site.prototype.isDone = function() {
    if (!this.walker.isDone()) {
      return false;
    }
    return this.roots.every(function(e) {
      return e.isDone();
    });
  };

  return Site;

})();

module.exports = {
  Site: Site,
  SiteBuilder: SiteBuilder,
  createSite: function(opt, plugins) {
    return new Site(opt, plugins);
  },
  plugins: qplugins.plugins,
  createPluginMap: qplugins.createPluginMap
};
