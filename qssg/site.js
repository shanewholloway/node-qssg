// Generated by CoffeeScript 1.6.1
var Site, events, exports, path, qbuilder, qcontent, qentry, qplugins, qrules, qutil,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

path = require('path');

events = require('events');

qplugins = require('./plugins');

qrules = require('./rules');

qcontent = require('./content');

qentry = require('./entry');

qbuilder = require('./builder');

qutil = require('./util');

module.exports = exports = Object.create(qplugins);

Site = (function(_super) {

  __extends(Site, _super);

  Object.defineProperties(Site.prototype, {
    site: {
      get: function() {
        return this;
      }
    }
  });

  function Site(opt, plugins) {
    if (opt == null) {
      opt = {};
    }
    Site.__super__.constructor.call(this);
    this.meta = opt.meta || this.meta || {};
    this.ctx = Object.create(opt.ctx || null);
    this.content = qcontent.createRoot();
    this.buildTasks = qutil.invokeList.ordered();
    this._initPlugins(opt, plugins);
    this._initWalker(opt);
  }

  Site.prototype._initWalker = function(opt) {
    var ruleset;
    if (opt == null) {
      opt = {};
    }
    ruleset = qrules.classifier();
    this.initMatchRuleset(ruleset, qrules);
    this.walker = qentry.createWalker(this, ruleset);
    this.walker.reject(opt.reject || /node_modules/);
    if (opt.accept != null) {
      this.walker.accept(opt.accept);
    }
    if (opt.filter != null) {
      this.walker.filter(opt.filter);
    }
    this.initWalker(this.walker);
    return this;
  };

  Site.prototype.initWalker = function(walker) {};

  Site.prototype.initMatchRuleset = function(ruleset, qrules) {
    return qrules.standardRuleset(ruleset);
  };

  Site.prototype.plugins = qplugins.plugins.clone();

  Site.prototype._initPlugins = function(opt, plugins) {
    this.plugins = this.plugins.clone();
    if (opt.plugins != null) {
      this.plugins.merge(opt.plugins);
    }
    if (plugins != null) {
      return this.plugins.merge(plugins);
    }
  };

  Site.prototype.walk = function(aPath, opt) {
    var plugins, tree;
    if (opt == null) {
      opt = {};
    }
    if ((plugins = opt.plugins) === void 0) {
      plugins = this.plugins;
    } else if (!(plugins != null ? plugins.findPlugin : void 0)) {
      plugins = this.plugins.clone().merge(plugins);
    }
    tree = this.content.addTree(path.join('.', opt.mount));
    this.emit('walk', aPath, tree, plugins);
    return this.walker.walkRootContent(aPath, tree, plugins);
  };

  Site.prototype.rewalkEntry = function(entry, c) {
    return false;
  };

  Site.prototype.matchEntryPlugin = function(entry, pluginFn, plugin) {
    try {
      this.emit('match', entry, pluginFn, plugin);
      return pluginFn(this.buildTasks);
    } catch (err) {
      console.warn(entry);
      console.warn(err.stack || err);
      return console.warn('');
    }
  };

  Site.prototype.matchEntryNullPlugin = function(entry) {
    if (!this.emit('match_null', entry)) {
      return console.warn("Plugin missing for '" + (path.relative('.', entry.srcPath)) + "'");
    }
  };

  Site.prototype.invokeBuildTasks = function() {
    var fn, taskFn, tasks, _i, _len, _ref;
    tasks = qutil.createTaskTracker.apply(qutil, arguments);
    _ref = this.buildTasks.sort().slice();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      fn = _ref[_i];
      taskFn = tasks();
      try {
        fn(vars, taskFn);
      } catch (err) {
        taskFn(err);
      }
    }
    return tasks.seed();
  };

  Site.prototype.build = function(rootPath, vars, callback) {
    var bldr,
      _this = this;
    if (typeof vars === 'function') {
      callback = vars;
      vars = null;
    }
    vars = Object.create(vars || null, {
      meta: {
        value: this.meta
      }
    });
    bldr = qbuilder.createBuilder(rootPath, this.content);
    this.walker.done(qutil.debounce(1, function() {
      _this.emit('build_tasks', bldr, rootPath, vars);
      return _this.invokeBuildTasks(qutil.debounce(1, function(err, tasks) {
        _this.emit('build_content', bldr, rootPath, vars);
        return bldr.build(vars, function() {
          _this.emit('build_done', bldr, rootPath, vars);
          return callback.apply(null, arguments);
        });
      }));
    }));
    return bldr;
  };

  return Site;

})(events.EventEmitter);

exports.Site = Site;

exports.createSite = function(opt, plugins) {
  return new Site(opt, plugins);
};
