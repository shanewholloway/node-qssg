// Generated by CoffeeScript 1.6.1
var Site, qbuilder, qcontent, qentry, qplugins, qrules, qutil;

qplugins = require('./plugins');

qrules = require('./rules');

qcontent = require('./content');

qentry = require('./entry');

qbuilder = require('./builder');

qutil = require('./util');

Site = (function() {

  Object.defineProperties(Site.prototype, {
    site: {
      get: function() {
        return this;
      }
    }
  });

  function Site(opt, plugins) {
    if (opt == null) {
      opt = {};
    }
    this.meta = Object.create(opt.meta || this.meta || null);
    this.ctx = Object.create(opt.ctx || null);
    this.content = qcontent.createRoot();
    this.tasks = qutil.createTaskTracker();
    this._initPlugins(opt, plugins);
    this._initWalker(opt);
  }

  Site.prototype._initWalker = function(opt) {
    var ruleset;
    if (opt == null) {
      opt = {};
    }
    ruleset = qrules.classifier();
    this.initMatchRuleset(ruleset, qrules);
    this.walker = qentry.createWalker(this, ruleset);
    this.walker.reject(opt.reject || /node_modules/);
    if (opt.accept != null) {
      this.walker.accept(opt.accept);
    }
    if (opt.filter != null) {
      this.walker.filter(opt.filter);
    }
    this.initWalker(this.walker);
    return this;
  };

  Site.prototype.initWalker = function(walker) {};

  Site.prototype.initMatchRuleset = function(ruleset, qrules) {
    return qrules.standardRuleset(ruleset);
  };

  Site.prototype.plugins = qplugins.plugins.clone();

  Site.prototype._initPlugins = function(opt, plugins) {
    this.plugins = this.plugins.clone();
    if (opt.plugins != null) {
      this.plugins.merge(opt.plugins);
    }
    if (plugins != null) {
      return this.plugins.merge(plugins);
    }
  };

  Site.prototype.walk = function(aPath, opt) {
    var plugins, tree;
    if (opt == null) {
      opt = {};
    }
    if (opt.plugins != null) {
      plugins = this.plugins.clone();
      plugins.merge(opt.plugins);
    } else {
      plugins = this.plugins;
    }
    tree = this.content.addTree(opt.mount);
    return this.walker.walkRootContent(aPath, tree, plugins);
  };

  Site.prototype.matchEntryPlugin = function(plugin, entry, matchMethod) {
    var method, _ref,
      _this = this;
    if (((_ref = (method = plugin[matchMethod])) != null ? _ref.call : void 0) != null) {
      return this.tasks.defer(function() {
        return method.call(plugin, entry, _this.tasks().wrap(function(err) {
          if (err != null) {
            return console.log("  " + err);
          }
        }));
      });
    } else {
      return this._plugin_dnu(plugin, matchMethod);
    }
  };

  Site.prototype._plugin_dnu = function(plugin, matchMethod) {
    return console.warn("" + plugin + " does not implement method '" + matchMethod + "'");
  };

  Site.prototype.build = function(rootPath, vars, done) {
    var bldr;
    if (typeof vars === 'function') {
      done = vars;
      vars = null;
    }
    vars = Object.create(vars || null, {
      meta: {
        value: this.meta
      }
    });
    bldr = qbuilder.createBuilder(rootPath, this.content);
    this.done(function() {
      return bldr.build(vars, done);
    });
    return bldr;
  };

  Site.prototype.done = function(done) {
    var tid,
      _this = this;
    if (this.isDone()) {
      return done();
    }
    return tid = setInterval(function() {
      if (!_this.isDone()) {
        return;
      }
      clearInterval(tid);
      return done();
    }, 10);
  };

  Site.prototype.isDone = function() {
    if (!this.walker.isDone()) {
      return false;
    }
    return this.roots.every(function(e) {
      return e.isDone();
    });
  };

  return Site;

})();

module.exports = {
  Site: Site,
  createSite: function(opt, plugins) {
    return new Site(opt, plugins);
  },
  plugins: qplugins.plugins,
  createPluginMap: qplugins.createPluginMap
};
