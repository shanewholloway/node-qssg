// Generated by CoffeeScript 1.4.0
var MatchEntry, stream;

stream = require('stream');

MatchEntry = (function() {

  Object.defineProperties(MatchEntry.prototype, {
    srcName: {
      get: function() {
        return this.src.name;
      }
    },
    srcPath: {
      get: function() {
        return this.src.path;
      }
    },
    srcRelPath: {
      get: function() {
        return this.src.relPath;
      }
    },
    mode: {
      get: function() {
        return this.src.mode;
      }
    },
    stat: {
      get: function() {
        return this.src.stat;
      }
    },
    path: {
      get: function() {
        return this.src.node.resolve(this.name);
      }
    },
    relPath: {
      get: function() {
        return this.src.node.relative(this.path);
      }
    },
    rootPath: {
      get: function() {
        return this.src.node.rootPath;
      }
    },
    name: {
      get: function() {
        var ext;
        ext = this.ext.join('.');
        return this.name0 + (ext && "." + ext || '');
      }
    }
  });

  MatchEntry.prototype.isFile = function() {
    return this.src.isFile();
  };

  MatchEntry.prototype.isDirectory = function() {
    return this.src.isDirectory();
  };

  MatchEntry.prototype.isWalkable = function() {
    var _ref;
    return (_ref = this.src).isWalkable.apply(_ref, arguments);
  };

  MatchEntry.prototype.walk = function() {
    var _ref;
    return (_ref = this.src).walk.apply(_ref, arguments);
  };

  function MatchEntry(walkEntry) {
    var ext, name0;
    ext = walkEntry.name.split('.');
    name0 = ext.shift();
    Object.defineProperties(this, {
      src: {
        value: walkEntry
      },
      srcName0: {
        value: name0
      },
      srcExt: {
        get: function() {
          return ext.slice();
        }
      },
      stat: {
        value: walkEntry.stat
      }
    });
    this.name0 = name0;
    this.ext = ext.slice();
  }

  MatchEntry.prototype.fs = require('fs');

  MatchEntry.prototype.readStream = function(options) {
    if (this.isFile) {
      return this.fs.createReadStream(this.src.path, options);
    }
  };

  MatchEntry.prototype.read = function(encoding, callback) {
    if (encoding == null) {
      encoding = 'utf-8';
    }
    if (typeof encoding === 'function') {
      callback = encoding;
      encoding = 'utf-8';
    }
    if (this.isFile) {
      return this.fs.readFile(this.src.path, encoding, callback);
    }
  };

  MatchEntry.prototype.readSync = function(encoding) {
    if (encoding == null) {
      encoding = 'utf-8';
    }
    if (this.isFile) {
      return this.fs.readFileSync(this.src.path, encoding);
    }
  };

  MatchEntry.prototype.loadModule = function() {
    return require(this.src.path);
  };

  MatchEntry.prototype.touch = function(arg) {
    if (arg === null) {
      delete this.mtime;
    } else {
      if (arg === true) {
        arg = new Date();
      }
      this.mtime = new Date(Math.max(this.mtime || 0, arg || 0, this.stat.mtime));
    }
    return this.mtime;
  };

  MatchEntry.prototype.walkPath = function() {
    return this.src.path;
  };

  MatchEntry.prototype.toJSON = function() {
    return {
      path: this.relPath,
      src: {
        path: this.relPath,
        mode: this.mode
      }
    };
  };

  MatchEntry.prototype.inspect = function() {
    return "[" + this.constructor.name + " " + this.mode + ":'" + this.relPath + "' src:'" + this.srcRelPath + "']";
  };

  MatchEntry.prototype.toString = function() {
    return this.inspect();
  };

  MatchEntry.prototype.OverlayMethods = {
    read: function(encoding, callback) {
      var _this = this;
      if (encoding == null) {
        encoding = 'utf-8';
      }
      if (typeof encoding === 'function') {
        callback = encoding;
        encoding = 'utf-8';
      }
      process.nextTick(function() {
        return callback(null, _this._source);
      });
    },
    readSync: function(encoding) {
      if (encoding == null) {
        encoding = 'utf-8';
      }
      return this._source;
    },
    readStream: function(options) {
      var src,
        _this = this;
      src = new stream.Stream();
      process.nextTick(function() {
        src.emit('data', _this._source);
        src.emit('end');
        return ee.emit('close');
      });
      return ee;
    }
  };

  MatchEntry.prototype.overlaySource = function(source, overlayReady) {
    var k, self, v, _ref;
    if (!(source != null)) {
      return this;
    }
    if (source.pipe != null) {
      return this._overlayStream(source, overlayReady);
    }
    self = Object.create(this, {
      overlaysEntry: {
        value: this
      },
      _source: {
        value: source
      }
    });
    _ref = this.OverlayMethods;
    for (k in _ref) {
      v = _ref[k];
      self[k] = v;
    }
    process.nextTick(function() {
      return overlayReady(null, self, source);
    });
  };

  MatchEntry.prototype._overlayStream = function(source, overlayReady) {
    var dataList, sendAnswer,
      _this = this;
    dataList = [];
    source.on('data', function(data) {
      return dataList.push(data);
    });
    source.on('error', function(err) {
      return sendAnswer(err);
    });
    source.on('end', function() {
      return sendAnswer();
    });
    sendAnswer = function(err) {
      sendAnswer = null;
      if (!(err != null)) {
        return _this.overlaySource(dataList.join(''), overlayReady);
      } else {
        return overlayReady(err);
      }
    };
  };

  return MatchEntry;

})();

exports.MatchEntry = MatchEntry;
