// Generated by CoffeeScript 1.6.1
var ComposedCommonPlugin, ComposedPlugin, TemplatePlugin, pluginTypes,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

exports.pluginTypes = pluginTypes = {};

ComposedCommonPlugin = (function() {

  function ComposedCommonPlugin() {}

  ComposedCommonPlugin.prototype.kinds = '';

  ComposedCommonPlugin.prototype.registerPluginOn = function(pluginMap) {
    return pluginMap.addPluginAt('&' + this.kind);
  };

  ComposedCommonPlugin.prototype.init = function(opt) {
    if (opt != null) {
      return this.initOptions(opt);
    }
  };

  ComposedCommonPlugin.prototype.initOptions = function(opt) {
    var k, v;
    if (opt != null) {
      for (k in opt) {
        if (!__hasProp.call(opt, k)) continue;
        v = opt[k];
        this[k] = v;
      }
    }
    return this;
  };

  ComposedCommonPlugin.prototype.inspect = function() {
    return "«" + this.constructor.name + "»";
  };

  ComposedCommonPlugin.prototype.toString = function() {
    return this.inspect();
  };

  ComposedCommonPlugin.prototype.asPluginPipeline = function(pi_list) {
    return new pluginTypes.pipeline(pi_list);
  };

  ComposedCommonPlugin.prototype.composePlugin = function(pi_list, entry) {
    var pi, self;
    if (typeof this.extendPlugins === "function") {
      this.extendPlugins(pi_list);
    }
    if (pi_list.length > 1) {
      pi = this.asPluginPipeline(pi_list);
    } else {
      pi = pi_list[0];
    }
    pi = pi.adapt(entry);
    self = Object.create(this, {
      pi: {
        value: pi
      }
    });
    if (typeof self.initComposed === "function") {
      self.initComposed(pi);
    }
    return self;
  };

  ComposedCommonPlugin.prototype.rename = function(entry) {
    return this.pi.rename(entry);
  };

  ComposedCommonPlugin.prototype.simple = function(entry, callback) {
    return this.notImplemented('simple', entry, callback);
  };

  ComposedCommonPlugin.prototype.composite = function(entry, callback) {
    return this.notImplemented('composite', entry, callback);
  };

  ComposedCommonPlugin.prototype.context = function(entry, callback) {
    return this.notImplemented('context', entry, callback);
  };

  ComposedCommonPlugin.prototype.simpleDir = function(entry, callback) {
    return this.notImplemented('simpleDir', entry, callback);
  };

  ComposedCommonPlugin.prototype.compositeDir = function(entry, callback) {
    return this.notImplemented('compositeDir', entry, callback);
  };

  ComposedCommonPlugin.prototype.contextDir = function(entry, callback) {
    return this.notImplemented('contextDir', entry, callback);
  };

  ComposedCommonPlugin.prototype.notImplemented = function(protocolMethod, entry, callback) {
    var err;
    err = "" + this + "::" + protocolMethod + "() not implemented for {entry: '" + entry.srcRelPath + "'}";
    callback(new Error(err));
  };

  return ComposedCommonPlugin;

})();

exports.ComposedCommonPlugin = ComposedCommonPlugin;

ComposedPlugin = (function(_super) {

  __extends(ComposedPlugin, _super);

  function ComposedPlugin() {
    return ComposedPlugin.__super__.constructor.apply(this, arguments);
  }

  ComposedPlugin.prototype.isFileKindPlugin = true;

  ComposedPlugin.prototype.isDirKindPlugin = true;

  ComposedPlugin.prototype.simple = function(entry, callback) {
    return this.pi.bindRender(entry, callback);
  };

  ComposedPlugin.prototype.composite = function(entry, callback) {
    return this.pi.bindRender(entry, callback);
  };

  ComposedPlugin.prototype.context = function(entry, callback) {
    return this.pi.bindContext(entry, callback);
  };

  ComposedPlugin.prototype.simpleDir = function(entry, callback) {
    if (entry.ext.length) {
      return this.compositeDir(entry, callback);
    }
    return this.pi.contentDir(entry, callback);
  };

  ComposedPlugin.prototype.compositeDir = function(entry, callback) {
    return this.pi.compositeDir(entry, callback);
  };

  ComposedPlugin.prototype.contextDir = function(entry, callback) {
    return this.pi.contextDir(entry, callback);
  };

  return ComposedPlugin;

})(ComposedCommonPlugin);

exports.ComposedPlugin = ComposedPlugin;

pluginTypes.composed = ComposedPlugin;

TemplatePlugin = (function(_super) {

  __extends(TemplatePlugin, _super);

  function TemplatePlugin() {
    return TemplatePlugin.__super__.constructor.apply(this, arguments);
  }

  TemplatePlugin.prototype.isFileKindPlugin = true;

  TemplatePlugin.prototype.isDirKindPlugin = true;

  TemplatePlugin.prototype.prefix = 't_';

  TemplatePlugin.prototype.composite = function(entry, callback) {
    return this.pi.bindTemplate(entry, callback, false);
  };

  TemplatePlugin.prototype.context = function(entry, callback) {
    return this.pi.bindTemplate(entry, callback, this.prefix);
  };

  return TemplatePlugin;

})(ComposedCommonPlugin);

exports.TemplatePlugin = TemplatePlugin;

pluginTypes.template = TemplatePlugin;
