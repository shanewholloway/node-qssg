// Generated by CoffeeScript 1.6.3
var KindBasePlugin, KindNullPlugin, KindPlugin, MetadataPlugin, PluginCompositeTasks, TemplatePlugin, qutil, _ref, _ref1, _ref2, _ref3, _ref4,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

qutil = require('./util');

PluginCompositeTasks = (function() {
  function PluginCompositeTasks() {}

  PluginCompositeTasks.prototype.loadSource = function(entry, source, vars, callback) {
    return entry.read(callback);
  };

  PluginCompositeTasks.prototype.bindLoadSource = function() {
    var pi, _i, _len, _ref;
    _ref = this.plugins;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      pi = _ref[_i];
      if (pi.loadSource != null) {
        return pi.loadSource.bind(pi, this.entry);
      }
    }
    return this.loadSource.bind(this, this.entry);
  };

  PluginCompositeTasks.prototype.bindPipelineFn = function(tasks, ns) {
    var _this = this;
    return function(source, vars, answerFn) {
      var k, q, stepFn, v, _ref;
      if (typeof answerFn !== 'function') {
        throw new Error("Callback function required");
      }
      if (ns != null) {
        vars = Object.create(vars);
        for (k in ns) {
          v = ns[k];
          vars[k] = v;
        }
      }
      if (vars != null) {
        if ((_ref = vars.output) != null) {
          _ref.plugins = _this;
        }
      }
      q = tasks.slice();
      stepFn = function(err, src) {
        var fn;
        if ((err == null) && ((fn = q.shift()) != null)) {
          try {
            return fn(src, vars, stepFn);
          } catch (_error) {
            err = _error;
            return answerFn(err);
          }
        } else {
          return answerFn(err, src);
        }
      };
      return stepFn(null, source);
    };
  };

  PluginCompositeTasks.prototype.bindRenderTasks = function(tasks, allowStream) {
    var entry, pi, pi_render_fn, _i, _len, _ref;
    if (tasks == null) {
      tasks = [];
    }
    entry = this.entry;
    pi_render_fn = function(source, vars, callback) {
      var err, _ref;
      if (vars != null) {
        if ((_ref = vars.output) != null) {
          _ref.pi_tip = this;
        }
      }
      try {
        return this.render(entry, source, vars, callback);
      } catch (_error) {
        err = _error;
        return callback(err);
      }
    };
    tasks.push(this.bindLoadSource());
    _ref = this.plugins;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      pi = _ref[_i];
      tasks.push(pi_render_fn.bind(pi));
    }
    return tasks;
  };

  PluginCompositeTasks.prototype.bindRenderFn = function(ns) {
    return this.bindPipelineFn(this.bindRenderTasks(), ns);
  };

  PluginCompositeTasks.prototype.bindRenderContent = function() {
    var citem, pi, _i, _len, _ref;
    citem = this.entry.bindContent();
    _ref = this.plugins;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      pi = _ref[_i];
      if (typeof pi.touchContent === "function") {
        pi.touchContent(this.entry, citem);
      }
    }
    if (this.plugins.length === 1 && (pi.renderStream != null)) {
      citem.bindRender(pi.renderStream.bind(pi, this.entry));
    } else {
      citem.bindRenderComposed();
      citem.renderTasks().push(this.bindRenderFn());
    }
    return citem;
  };

  PluginCompositeTasks.prototype.bindTemplateFn = function(ns) {
    var renderFn, tmplFn,
      _this = this;
    renderFn = this.bindRenderFn(ns);
    tmplFn = function(source, vars, answerFn) {
      vars = Object.create(vars || null, {
        content: {
          value: source
        }
      });
      return renderFn(vars, answerFn);
    };
    return tmplFn;
  };

  PluginCompositeTasks.prototype.addTemplate = function(tmplFn, order) {
    if (order == null) {
      order = this.templateOrder;
    }
    if (tmplFn == null) {
      tmplFn = this.bindTemplateFn(null);
    }
    return this.entry.getContent().addTemplate(tmplFn, order);
  };

  PluginCompositeTasks.prototype.templateOrder = 0;

  PluginCompositeTasks.prototype.bindContextTasks = function(tasks) {
    var entry, pi, pi_context_fn, _i, _len, _ref;
    if (tasks == null) {
      tasks = [];
    }
    entry = this.entry;
    pi_context_fn = function(source, vars, callback) {
      var err, _ref;
      if (vars != null) {
        if ((_ref = vars.output) != null) {
          _ref.pi_tip = this;
        }
      }
      try {
        return this.context(entry, source, vars, callback);
      } catch (_error) {
        err = _error;
        return callback(err);
      }
    };
    tasks.push(this.bindLoadSource());
    _ref = this.plugins;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      pi = _ref[_i];
      tasks.push(pi_context_fn.bind(pi));
    }
    return tasks;
  };

  PluginCompositeTasks.prototype.bindContextFn = function(ns) {
    return this.bindPipelineFn(this.bindContextTasks(), ns);
  };

  PluginCompositeTasks.prototype.setContext = function(vars, callback) {
    var ctxFn,
      _this = this;
    if (vars == null) {
      vars = {};
    }
    if (typeof vars === 'function') {
      callback = vars;
      vars = {};
    }
    ctxFn = this.bindContextFn();
    return ctxFn(null, vars, function(err, value) {
      if (err == null) {
        _this.entry.setCtxValue(value);
      }
      return typeof callback === "function" ? callback(err, value) : void 0;
    });
  };

  PluginCompositeTasks.prototype.setMetadata = function(vars, callback) {
    var ctxFn,
      _this = this;
    if (vars == null) {
      vars = {};
    }
    if (typeof vars === 'function') {
      callback = vars;
      vars = {};
    }
    ctxFn = this.bindContextFn();
    return ctxFn(null, vars, function(err, metadata) {
      var citem, k, v;
      if ((err == null) && (metadata != null)) {
        citem = _this.entry.getContent();
        for (k in metadata) {
          v = metadata[k];
          citem.meta[k] = v;
        }
      }
      return typeof callback === "function" ? callback(err, metadata) : void 0;
    });
  };

  return PluginCompositeTasks;

})();

exports.PluginCompositeTasks = PluginCompositeTasks;

KindBasePlugin = (function(_super) {
  __extends(KindBasePlugin, _super);

  function KindBasePlugin() {
    _ref = KindBasePlugin.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  KindBasePlugin.prototype.isKindPlugin = true;

  KindBasePlugin.prototype.kinds = '';

  KindBasePlugin.prototype.registerPluginOn = function(pluginMap) {
    var k, _i, _len, _ref1, _results;
    _ref1 = this.kinds.split(/\W/);
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      k = _ref1[_i];
      _results.push(pluginMap.addKindPluginAt(k, this));
    }
    return _results;
  };

  KindBasePlugin.prototype.init = function(opt) {
    if (opt != null) {
      return this.initOptions(opt);
    }
  };

  KindBasePlugin.prototype.initOptions = function(opt) {
    var k, v;
    if (opt != null) {
      for (k in opt) {
        if (!__hasProp.call(opt, k)) continue;
        v = opt[k];
        this[k] = v;
      }
    }
    return this;
  };

  KindBasePlugin.prototype.inspect = function() {
    return "«" + this.constructor.name + ": [" + ((this.plugins || []).join(', ')) + "]»";
  };

  KindBasePlugin.prototype.toString = function() {
    return this.inspect();
  };

  KindBasePlugin.prototype.extendPlugins = function(plugins) {
    var _ref1, _ref2;
    if ((_ref1 = this.plugins_before) != null ? _ref1.length : void 0) {
      plugins.unshift.apply(plugins, this.plugins_before);
    }
    if ((_ref2 = this.plugins_after) != null ? _ref2.length : void 0) {
      plugins.push.apply(plugins, this.plugins_after);
    }
    return plugins;
  };

  KindBasePlugin.prototype._expandPluginsInorder = function(plugins) {
    var pi_visitor, v;
    if (typeof this.extendPlugins === "function") {
      this.extendPlugins(plugins);
    }
    v = [];
    plugins.splice(0).forEach(pi_visitor = function(pi) {
      var _ref1, _ref2;
      if (~v.indexOf(pi)) {
        return;
      }
      v.push(pi);
      if (pi.iterPlugins != null) {
        return pi.iterPlugins(pi_visitor);
      } else {
        if ((_ref1 = pi.plugins_before) != null) {
          _ref1.forEach(pi_visitor);
        }
        plugins.push(pi);
        return (_ref2 = pi.plugins_after) != null ? _ref2.forEach(pi_visitor) : void 0;
      }
    });
    return plugins;
  };

  KindBasePlugin.prototype.composePlugin = function(plugins, entry) {
    var self;
    plugins = this._expandPluginsInorder(plugins || []).map(function(pi) {
      if ((pi = pi.adapt(entry)) != null) {
        pi.rename(entry);
        return pi;
      }
    }).filter(function(e) {
      return e != null;
    });
    self = Object.create(this, {
      plugins: {
        value: plugins
      },
      entry: {
        value: entry
      }
    });
    self.initComposed();
    return self;
  };

  KindBasePlugin.prototype.initComposed = function() {
    var fn, vec;
    vec = this.plugins.map(function(pi) {
      return pi.buildOrder;
    });
    vec = vec.filter(function(e) {
      return e;
    });
    if (vec.length) {
      fn = this.buildOrder > 1 && Math.max || Math.min;
      return this.buildOrder = fn.apply(null, vec);
    }
  };

  KindBasePlugin.prototype.bindPluginFn = function(matchMethod) {
    return this[matchMethod].bind(this);
  };

  KindBasePlugin.prototype.notImplemented = function(protocolMethod) {
    throw new Error("" + this + "::" + protocolMethod + "() not implemented for {entry: '" + this.entry.srcRelPath + "'}");
  };

  KindBasePlugin.prototype.simple = function(buildTasks) {
    return this.notImplemented('simple');
  };

  KindBasePlugin.prototype.composite = function(buildTasks) {
    return this.notImplemented('composite');
  };

  KindBasePlugin.prototype.context = function(buildTasks) {
    return this.notImplemented('context');
  };

  KindBasePlugin.prototype.simpleDir = function(buildTasks) {
    return this.notImplemented('simpleDir');
  };

  KindBasePlugin.prototype.compositeDir = function(buildTasks) {
    return this.notImplemented('compositeDir');
  };

  KindBasePlugin.prototype.contextDir = function(buildTasks) {
    return this.notImplemented('contextDir');
  };

  return KindBasePlugin;

})(PluginCompositeTasks);

exports.KindBasePlugin = KindBasePlugin;

KindNullPlugin = (function(_super) {
  __extends(KindNullPlugin, _super);

  function KindNullPlugin() {
    _ref1 = KindNullPlugin.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  KindNullPlugin.prototype.simple = function(buildTasks) {};

  KindNullPlugin.prototype.composite = function(buildTasks) {};

  KindNullPlugin.prototype.context = function(buildTasks) {};

  KindNullPlugin.prototype.simpleDir = function(buildTasks) {};

  KindNullPlugin.prototype.compositeDir = function(buildTasks) {};

  KindNullPlugin.prototype.contextDir = function(buildTasks) {};

  return KindNullPlugin;

})(KindBasePlugin);

exports.KindNullPlugin = KindNullPlugin;

KindPlugin = (function(_super) {
  __extends(KindPlugin, _super);

  function KindPlugin() {
    _ref2 = KindPlugin.__super__.constructor.apply(this, arguments);
    return _ref2;
  }

  KindPlugin.prototype.buildOrder = 2;

  KindPlugin.prototype.simple = function(buildTasks) {
    return this.bindRenderContent();
  };

  KindPlugin.prototype.composite = function(buildTasks) {
    return this.bindRenderContent();
  };

  KindPlugin.prototype.context = function(buildTasks) {
    var _this = this;
    return buildTasks.add(this.buildOrder, function(vars, taskFn) {
      return _this.setContext(vars, taskFn);
    });
  };

  KindPlugin.prototype.simpleDir = function(buildTasks) {
    var ctree;
    if (this.entry.ext.length) {
      return this.compositeDir(this.entry);
    }
    ctree = this.entry.addContentTree();
    return this.entry.walk();
  };

  KindPlugin.prototype.compositeDir = function(buildTasks) {
    var ctree;
    ctree = this.entry.addComposite();
    return this.entry.walk();
  };

  KindPlugin.prototype.contextDir = function(buildTasks) {
    var ctree;
    if (this.entry.ext.length > 0) {
      console.warn('Context directories with extensions are not defined');
    }
    ctree = this.entry.newCtxTree();
    return this.entry.walk();
  };

  return KindPlugin;

})(KindBasePlugin);

exports.KindPlugin = KindPlugin;

TemplatePlugin = (function(_super) {
  __extends(TemplatePlugin, _super);

  function TemplatePlugin() {
    _ref3 = TemplatePlugin.__super__.constructor.apply(this, arguments);
    return _ref3;
  }

  TemplatePlugin.prototype.templateOrder = 1;

  TemplatePlugin.prototype.buildOrder = 5;

  TemplatePlugin.prototype.composite = function(buildTasks) {
    var _this = this;
    return buildTasks.add(this.buildOrder, function(vars, taskFn) {
      _this.addTemplate();
      return taskFn();
    });
  };

  TemplatePlugin.prototype.context = function(buildTasks) {
    var _this = this;
    return buildTasks.add(this.buildOrder, function(vars, taskFn) {
      _this.entry.setCtxTemplate(_this.bindTemplateFn());
      return taskFn();
    });
  };

  return TemplatePlugin;

})(KindBasePlugin);

exports.TemplatePlugin = TemplatePlugin;

MetadataPlugin = (function(_super) {
  __extends(MetadataPlugin, _super);

  function MetadataPlugin() {
    _ref4 = MetadataPlugin.__super__.constructor.apply(this, arguments);
    return _ref4;
  }

  MetadataPlugin.prototype.buildOrder = -1;

  MetadataPlugin.prototype.composite = function(buildTasks) {
    var _this = this;
    return buildTasks.add(this.buildOrder, function(vars, taskFn) {
      return _this.setMetadata(taskFn);
    });
  };

  MetadataPlugin.prototype.context = function(buildTasks) {
    var _this = this;
    return buildTasks.add(this.buildOrder, function(vars, taskFn) {
      return _this.setMetadata(taskFn);
    });
  };

  return MetadataPlugin;

})(KindBasePlugin);

exports.MetadataPlugin = MetadataPlugin;

/*
//@ sourceMappingURL=pluginKinds.map
*/
