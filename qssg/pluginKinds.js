// Generated by CoffeeScript 1.6.1
var KindBasePlugin, KindPlugin, MetadataPlugin, TemplatePlugin, pluginTypes, qutil,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

qutil = require('./util');

exports.pluginTypes = pluginTypes = {};

KindBasePlugin = (function() {

  function KindBasePlugin() {}

  KindBasePlugin.prototype.isKindPlugin = true;

  KindBasePlugin.prototype.kinds = '';

  KindBasePlugin.prototype.registerPluginOn = function(pluginMap) {
    return pluginMap.addPluginAt('&' + this.kind);
  };

  KindBasePlugin.prototype.init = function(opt) {
    if (opt != null) {
      return this.initOptions(opt);
    }
  };

  KindBasePlugin.prototype.initOptions = function(opt) {
    var k, v;
    if (opt != null) {
      for (k in opt) {
        if (!__hasProp.call(opt, k)) continue;
        v = opt[k];
        this[k] = v;
      }
    }
    return this;
  };

  KindBasePlugin.prototype.inspect = function() {
    return "«" + this.constructor.name + "»";
  };

  KindBasePlugin.prototype.toString = function() {
    return this.inspect();
  };

  KindBasePlugin.prototype.composePlugin = function(plugins, entry, matchMethod) {
    var i, pi, self, _i, _len;
    plugins || (plugins = []);
    if (typeof this.extendPlugins === "function") {
      this.extendPlugins(plugins);
    }
    for (i = _i = 0, _len = plugins.length; _i < _len; i = ++_i) {
      pi = plugins[i];
      pi = pi.adapt(entry);
      entry = pi.rename(entry);
      plugins[i] = pi;
    }
    self = Object.create(this, {
      plugins: {
        value: plugins
      },
      entry: {
        value: entry
      }
    });
    if (typeof self.initComposed === "function") {
      self.initComposed();
    }
    return self;
  };

  KindBasePlugin.prototype.bindPluginFn = function(matchMethod) {
    return this[matchMethod].bind(this);
  };

  KindBasePlugin.prototype.notImplemented = function(protocolMethod, done) {
    var err;
    err = "" + this + "::" + protocolMethod + "() not implemented for {entry: '" + this.entry.srcRelPath + "'}";
    done(new Error(err));
  };

  KindBasePlugin.prototype.simple = function(buildTasks, done) {
    return this.notImplemented('simple', done);
  };

  KindBasePlugin.prototype.composite = function(buildTasks, done) {
    return this.notImplemented('composite', done);
  };

  KindBasePlugin.prototype.context = function(buildTasks, done) {
    return this.notImplemented('context', done);
  };

  KindBasePlugin.prototype.simpleDir = function(buildTasks, done) {
    return this.notImplemented('simpleDir', done);
  };

  KindBasePlugin.prototype.compositeDir = function(buildTasks, done) {
    return this.notImplemented('compositeDir', done);
  };

  KindBasePlugin.prototype.contextDir = function(buildTasks, done) {
    return this.notImplemented('contextDir', done);
  };

  KindBasePlugin.prototype.bindTaskFn = function(tasks, ns) {
    var _this = this;
    return function(vars, answerFn) {
      var k, q, stepFn, v;
      if (ns != null) {
        vars = Object.create(vars);
        for (k in ns) {
          v = ns[k];
          vars[k] = v;
        }
      }
      q = tasks.slice();
      stepFn = function(err, src) {
        var fn;
        if ((err == null) && ((fn = q.shift()) != null)) {
          return fn(src, vars, stepFn);
        } else {
          return answerFn(err, src);
        }
      };
      return _this.entry.read(stepFn);
    };
  };

  KindBasePlugin.prototype.bindRenderTasks = function(tasks) {
    var pi, _i, _len, _ref;
    if (tasks == null) {
      tasks = [];
    }
    _ref = this.plugins;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      pi = _ref[_i];
      if (pi.render != null) {
        tasks.push(pi.render.bind(pi, this.entry));
      }
    }
    return tasks;
  };

  KindBasePlugin.prototype.bindRenderFn = function(ns) {
    return this.bindTaskFn(this.bindRenderTasks(), ns);
  };

  KindBasePlugin.prototype.bindRenderContent = function() {
    var citem;
    citem = this.entry.getContent();
    this.bindRenderTasks(citem.bindRender(this.entry));
    return citem;
  };

  KindBasePlugin.prototype.bindTemplate = function() {
    var renderFn,
      _this = this;
    renderFn = this.bindRenderFn(null);
    return this.addTemplate(function(source, vars, answerFn) {
      vars = Object.create(vars, {
        content: {
          value: source
        }
      });
      return renderFn(vars, answerFn);
    });
  };

  KindBasePlugin.prototype.addTemplate = function(tmplFn, order) {
    if (order == null) {
      order = this.templateOrder;
    }
    return this.entry.getContent().addTemplate(tmplFn, order);
  };

  KindBasePlugin.prototype.templateOrder = 0;

  KindBasePlugin.prototype.bindContextTasks = function(tasks) {
    var pi, _i, _len, _ref;
    if (tasks == null) {
      tasks = [];
    }
    _ref = this.plugins;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      pi = _ref[_i];
      if (pi.context != null) {
        tasks.push(pi.context.bind(pi, this.entry));
      }
    }
    return tasks;
  };

  KindBasePlugin.prototype.bindContextFn = function(ns) {
    return this.bindTaskFn(this.bindContextTasks(), ns);
  };

  KindBasePlugin.prototype.setContext = function(vars, callback) {
    var ctxFn,
      _this = this;
    if (vars == null) {
      vars = {};
    }
    if (typeof vars === 'function') {
      callback = vars;
      vars = void 0;
    }
    vars = Object.create(vars || null, {
      ctx: {
        value: this.entry.ctx
      }
    });
    ctxFn = this.bindContextFn();
    return ctxFn(vars, function(err, value) {
      if (err == null) {
        _this.entry.setCtxValue(value);
      }
      return typeof callback === "function" ? callback(err, value) : void 0;
    });
  };

  KindBasePlugin.prototype.setMetadata = function(vars, callback) {
    var ctxFn,
      _this = this;
    if (vars == null) {
      vars = {};
    }
    if (typeof vars === 'function') {
      callback = vars;
      vars = void 0;
    }
    vars = Object.create(vars || null, {
      ctx: {
        value: this.entry.ctx
      }
    });
    ctxFn = this.bindContextFn();
    return ctxFn(vars, function(err, metadata) {
      var citem, k, v;
      if ((err == null) && (metadata != null)) {
        citem = _this.entry.getContent();
        for (k in metadata) {
          v = metadata[k];
          citem.meta[k] = v;
        }
      }
      return typeof callback === "function" ? callback(err, metadata) : void 0;
    });
  };

  return KindBasePlugin;

})();

exports.KindBasePlugin = KindBasePlugin;

KindPlugin = (function(_super) {

  __extends(KindPlugin, _super);

  function KindPlugin() {
    return KindPlugin.__super__.constructor.apply(this, arguments);
  }

  KindPlugin.prototype.buildOrder = 2;

  KindPlugin.prototype.simple = function(buildTasks, done) {
    this.bindRenderContent();
    return done();
  };

  KindPlugin.prototype.composite = function(buildTasks, done) {
    this.bindRenderContent();
    return done();
  };

  KindPlugin.prototype.context = function(buildTasks, done) {
    var _this = this;
    buildTasks.add(this.buildOrder, function() {
      return _this.setContext({}, done);
    });
    return done();
  };

  KindPlugin.prototype.simpleDir = function(buildTasks, done) {
    var ctree;
    if (this.entry.ext.length) {
      return this.compositeDir(this.entry, done);
    }
    ctree = this.entry.addContentTree();
    this.entry.walk();
    return done();
  };

  KindPlugin.prototype.compositeDir = function(buildTasks, done) {
    var ctree;
    ctree = this.entry.addComposite();
    this.entry.walk();
    return done();
  };

  KindPlugin.prototype.contextDir = function(buildTasks, done) {
    var ctree;
    if (this.entry.ext.length > 0) {
      console.warn('Context directories with extensions are not defined');
    }
    ctree = this.entry.newCtxTree();
    this.entry.walk();
    return done();
  };

  return KindPlugin;

})(KindBasePlugin);

exports.KindPlugin = KindPlugin;

pluginTypes.kind = KindPlugin;

TemplatePlugin = (function(_super) {

  __extends(TemplatePlugin, _super);

  function TemplatePlugin() {
    return TemplatePlugin.__super__.constructor.apply(this, arguments);
  }

  TemplatePlugin.prototype.templateOrder = 1;

  TemplatePlugin.prototype.buildOrder = 5;

  TemplatePlugin.prototype.composite = function(buildTasks, done) {
    var _this = this;
    buildTasks.add(this.buildOrder, function() {
      return _this.bindTemplate();
    });
    return done();
  };

  TemplatePlugin.prototype.context = function(buildTasks, done) {
    var _this = this;
    buildTasks.add(this.buildOrder, function() {
      return _this.bindTemplate();
    });
    return done();
  };

  return TemplatePlugin;

})(KindBasePlugin);

exports.TemplatePlugin = TemplatePlugin;

pluginTypes.template = TemplatePlugin;

MetadataPlugin = (function(_super) {

  __extends(MetadataPlugin, _super);

  function MetadataPlugin() {
    return MetadataPlugin.__super__.constructor.apply(this, arguments);
  }

  MetadataPlugin.prototype.buildOrder = -1;

  MetadataPlugin.prototype.composite = function(buildTasks, done) {
    var _this = this;
    buildTasks.add(this.buildOrder, function() {
      return _this.setMetadata();
    });
    return done();
  };

  MetadataPlugin.prototype.context = function(buildTasks, done) {
    var _this = this;
    buildTasks.add(this.buildOrder, function() {
      return _this.setMetadata();
    });
    return done();
  };

  return MetadataPlugin;

})(KindBasePlugin);

exports.TemplatePlugin = TemplatePlugin;

pluginTypes.template = TemplatePlugin;
