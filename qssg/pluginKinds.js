// Generated by CoffeeScript 1.6.1
var ComposedCommonPlugin, ComposedDirPlugin, ComposedFilePlugin, ComposedPlugin, pluginTypes,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

exports.pluginTypes = pluginTypes = {};

ComposedCommonPlugin = (function() {

  function ComposedCommonPlugin() {}

  ComposedCommonPlugin.prototype.kinds = '';

  ComposedCommonPlugin.prototype.registerPluginOn = function(pluginMap) {
    return pluginMap.addPluginAt('&' + this.kind);
  };

  ComposedCommonPlugin.prototype.init = function(opt) {
    if (opt != null) {
      return this.initOptions(opt);
    }
  };

  ComposedCommonPlugin.prototype.initOptions = function(opt) {
    var k, v;
    if (opt != null) {
      for (k in opt) {
        if (!__hasProp.call(opt, k)) continue;
        v = opt[k];
        this[k] = v;
      }
    }
    return this;
  };

  ComposedCommonPlugin.prototype.inspect = function() {
    return "«" + this.constructor.name + "»";
  };

  ComposedCommonPlugin.prototype.toString = function() {
    return this.inspect();
  };

  ComposedCommonPlugin.prototype.composePlugin = function(pi, entry) {
    return Object.create(this, {
      pi: {
        value: pi
      }
    });
  };

  return ComposedCommonPlugin;

})();

exports.ComposedCommonPlugin = ComposedCommonPlugin;

ComposedFilePlugin = (function(_super) {

  __extends(ComposedFilePlugin, _super);

  function ComposedFilePlugin() {
    return ComposedFilePlugin.__super__.constructor.apply(this, arguments);
  }

  ComposedFilePlugin.prototype.isFileKindPlugin = true;

  ComposedFilePlugin.prototype.simple = function(entry, callback) {
    return this.pi.bindRender(entry, callback);
  };

  ComposedFilePlugin.prototype.composite = function(entry, callback) {
    return this.pi.bindRender(entry, callback);
  };

  ComposedFilePlugin.prototype.context = function(entry, callback) {
    return this.pi.bindContext(entry, callback);
  };

  return ComposedFilePlugin;

})(ComposedCommonPlugin);

exports.ComposedFilePlugin = ComposedFilePlugin;

pluginTypes.composed_file = ComposedFilePlugin;

ComposedDirPlugin = (function(_super) {

  __extends(ComposedDirPlugin, _super);

  function ComposedDirPlugin() {
    return ComposedDirPlugin.__super__.constructor.apply(this, arguments);
  }

  ComposedDirPlugin.prototype.isDirKindPlugin = true;

  ComposedDirPlugin.prototype.simpleDir = function(entry, callback) {
    return this.pi.contentDir(entry, callback);
  };

  ComposedDirPlugin.prototype.compositeDir = function(entry, callback) {
    return this.pi.contentDir(entry, callback);
  };

  ComposedDirPlugin.prototype.contextDir = function(entry, callback) {
    return this.pi.bindContextDir(entry, callback);
  };

  return ComposedDirPlugin;

})(ComposedCommonPlugin);

exports.ComposedDirPlugin = ComposedDirPlugin;

pluginTypes.composed_dir = ComposedDirPlugin;

ComposedPlugin = (function(_super) {

  __extends(ComposedPlugin, _super);

  function ComposedPlugin() {
    return ComposedPlugin.__super__.constructor.apply(this, arguments);
  }

  ComposedPlugin.prototype.isFileKindPlugin = true;

  ComposedPlugin.prototype.isDirKindPlugin = true;

  ComposedPlugin.prototype.simple = ComposedFilePlugin.prototype.simple;

  ComposedPlugin.prototype.composite = ComposedFilePlugin.prototype.composite;

  ComposedPlugin.prototype.context = ComposedFilePlugin.prototype.context;

  ComposedPlugin.prototype.simpleDir = ComposedDirPlugin.prototype.simpleDir;

  ComposedPlugin.prototype.compositeDir = ComposedDirPlugin.prototype.compositeDir;

  ComposedPlugin.prototype.contextDir = ComposedDirPlugin.prototype.contextDir;

  return ComposedPlugin;

})(ComposedCommonPlugin);

exports.ComposedPlugin = ComposedPlugin;

pluginTypes.composed = ComposedPlugin;
