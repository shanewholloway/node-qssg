// Generated by CoffeeScript 1.4.0
var BasicTree, BasicTreeDispatch, CompositeTree, ContextTree, Tree, path, qrules, qutil,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

path = require('path');

qrules = require('./rules');

qutil = require('./util');

BasicTree = (function() {

  Object.defineProperties(BasicTree.prototype, {
    walker: {
      get: function() {
        return this.site.walker;
      }
    },
    plugins: {
      get: function() {
        return this.site.plugins;
      }
    },
    matchRuleset: {
      get: function() {
        return this.parent.matchRuleset;
      }
    }
  });

  BasicTree.prototype.isTree = function() {
    return true;
  };

  function BasicTree(parent, entryOrPath) {
    this._init(parent, entryOrPath);
  }

  BasicTree.prototype.initTreeContext = function() {
    var _ref;
    this.ctx = this.initCtx((_ref = this.parent) != null ? _ref.ctx : void 0);
    return this.content = this.createContentTree();
  };

  BasicTree.prototype.initCtx = function(ctx) {
    return Object.create(ctx || null);
  };

  BasicTree.prototype.extendVars = function(vars) {
    if (vars == null) {
      vars = {};
    }
    vars.ctx = this.ctx;
    return vars;
  };

  BasicTree.prototype.initRuleset = function(qrules) {
    return this.matchRuleset = this.matchRuleset;
  };

  BasicTree.prototype.initEntry = function(entry) {
    if (this.entry != null) {
      return this.walk(this.entry);
    }
  };

  BasicTree.prototype._init = function(parent, entryOrPath) {
    this.parent = parent;
    this.site = this.parent.site;
    if ((entryOrPath != null ? entryOrPath.relPath : void 0) != null) {
      this.entry = entryOrPath;
    } else if (entryOrPath != null) {
      this.mountPoint = entryOrPath.toString();
    }
    this.tasks = qutil.createTaskTracker();
    this.initRuleset(qrules);
    this.initTreeContext();
    return this.initEntry();
  };

  BasicTree.prototype.inspect = function() {
    if (this.entry != null) {
      return "[" + this.constructor.name + " at:'./" + this.entry.srcRelPath + "']";
    } else {
      return "[" + this.constructor.name + " at:-]";
    }
  };

  BasicTree.prototype.toString = function() {
    return this.inspect();
  };

  BasicTree.prototype.walk = function(pathOrEntry) {
    return this.walker.walk(pathOrEntry, this);
  };

  BasicTree.prototype.walkNotify = function(walkKey, entry) {
    if (walkKey === 'entry') {
      this.matchRuleset.matchRules(entry, this);
    }
    return true;
  };

  BasicTree.prototype.match = function(entry, matchKey) {
    return this._match_doesNotUnderstand(entry, matchKey);
  };

  BasicTree.prototype._match_doesNotUnderstand = function(entry, matchKey) {
    return console.log("" + this + "::match() handle {entry:'" + entry.relPath + "', matchKey:'" + matchKey + "'}");
  };

  BasicTree.prototype.setCtxVar = function(key, value) {
    return this.ctx[key] = value;
  };

  BasicTree.prototype.taskCtxVar = function(entry) {
    var _this = this;
    return this.tasks.add(entry, function(err, value) {
      if (value === !void 0) {
        return _this.setCtxVar(entry.name0, value);
      }
    });
  };

  BasicTree.prototype.taskEvaluate = function(entry) {
    return this.tasks.add(entry, null);
  };

  BasicTree.prototype.taskComposite = function(entry) {
    return this.tasks.add(entry, null);
  };

  BasicTree.prototype.taskCompositeFile = function(entry) {
    return this.tasks.add(entry, null);
  };

  BasicTree.prototype.taskSubTree = function(entry, tree) {
    return this.tasks.add(entry, null);
  };

  BasicTree.prototype.taskCtxTree = function(entry, tree) {
    return this.tasks.add(entry, null);
  };

  BasicTree.prototype.tasksDone = function(callback) {
    if (this.tasks.isDone()) {
      callback(this.tasks, this.tasks.completed);
    } else {
      this.tasks.done.once.push(callback);
    }
    return this;
  };

  BasicTree.prototype.isDone = function() {
    return this.tasks.isDone();
  };

  BasicTree.prototype.keyFromEntry = function(srcEntry, dstEntry) {
    var srcPath;
    srcPath = (srcEntry != null ? srcEntry.srcRelPath : void 0) || this.mountPoint || '.';
    return path.relative(srcPath, dstEntry != null ? dstEntry.relPath : void 0);
  };

  BasicTree.prototype.asKey = function(dstEntry) {
    if (dstEntry != null) {
      return this.keyFromEntry(this.entry, dstEntry);
    } else if (this.entry != null) {
      return this.keyFromEntry(this.parent.entry, this.entry);
    } else {
      return this.mountPoint || '.';
    }
  };

  BasicTree.prototype.addContent = function(entry, plugin) {
    var renderFn, task,
      _this = this;
    if (plugin.rename != null) {
      entry = plugin.rename(entry, this);
    }
    task = this.tasks.add(entry, plugin, this.addContentFn.bind(this, {
      entry: entry,
      plugin: plugin
    }));
    if (!(plugin.bindContent != null)) {
      renderFn = function(vars, answerFn) {
        return plugin.content(entry, _this, vars, answerFn);
      };
      return task(null, renderFn);
    } else {
      return plugin.bindContent(entry, this, task);
    }
  };

  BasicTree.prototype.addContentFn = function(obj, err, renderFn) {
    if (typeof err === 'function' && !(renderFn != null)) {
      renderFn = err;
      err = null;
    }
    if (!(err != null)) {
      return this.content.addContent(this.asKey(obj.entry), renderFn, obj);
    }
  };

  BasicTree.prototype.createContentTree = function() {
    return this.addParentContentTree();
  };

  BasicTree.prototype.addParentContentTree = function(renderFn) {
    if (renderFn == null) {
      renderFn = this.renderTreeFn.bind(this);
    }
    return this.parent.content.addTree(this.asKey(), renderFn, {
      tree: this,
      entry: this.entry
    });
  };

  BasicTree.prototype.renderTreeFn = function(vars, answerFn) {
    return this.tasksDone(function() {
      return answerFn(null);
    });
  };

  return BasicTree;

})();

BasicTreeDispatch = (function(_super) {

  __extends(BasicTreeDispatch, _super);

  function BasicTreeDispatch() {
    return BasicTreeDispatch.__super__.constructor.apply(this, arguments);
  }

  BasicTreeDispatch.prototype.findPlugin = function(entry, matchKey) {
    return this.plugins.findPlugin(entry, matchKey);
  };

  BasicTreeDispatch.prototype.findDisp = function(matchKey, mode) {
    return this["match_" + matchKey + "_" + mode] || this["match_" + matchKey] || this["match_" + mode];
  };

  BasicTreeDispatch.prototype._match_doesNotUnderstand = function(entry, matchKey) {
    return console.log("'" + entry.relPath + "' from " + this + " as: match_" + matchKey + "_" + entry.mode + "()");
  };

  BasicTreeDispatch.prototype.match = function(entry, matchKey) {
    var handleFn, mode,
      _this = this;
    mode = entry.mode;
    handleFn = this.findDisp(matchKey, entry.mode);
    return this.tasks.defer(function() {
      var plugin;
      if (handleFn != null) {
        plugin = _this.findPlugin(entry, matchKey);
        return handleFn.call(_this, entry, plugin);
      }
      return _this._match_doesNotUnderstand(entry, matchKey);
    });
  };

  if (0) {
    BasicTreeDispatch.prototype.match_file = function(entry, plugin) {};
    BasicTreeDispatch.prototype.match_dir = function(entry, plugin) {};
  }

  if (0) {
    BasicTreeDispatch.prototype.match_simple = function(entry, plugin) {};
    BasicTreeDispatch.prototype.match_simple_dir = function(entry, plugin) {};
    BasicTreeDispatch.prototype.match_simple_file = function(entry, plugin) {};
  }

  BasicTreeDispatch.prototype.newSubTree = function(entry) {
    return new this.constructor(this, entry);
  };

  BasicTreeDispatch.prototype.match_simple_dir = function(entry, plugin) {
    var tree;
    tree = this.newSubTree(entry);
    if (tree != null) {
      if (typeof plugin.subTree === "function") {
        plugin.subTree(entry, tree, this, this.taskSubTree(entry, tree));
      }
    }
  };

  BasicTreeDispatch.prototype.match_simple_file = function(entry, plugin) {
    this.addContent(entry, plugin);
  };

  if (0) {
    BasicTreeDispatch.prototype.match_evaluate = function(entry, plugin) {};
    BasicTreeDispatch.prototype.match_evaluate_dir = function(entry, plugin) {};
    BasicTreeDispatch.prototype.match_evaluate_file = function(entry, plugin) {};
  }

  BasicTreeDispatch.prototype.match_evaluate = function(entry, plugin) {
    plugin.evaluate(entry, this, this.taskEvaluate(entry));
  };

  if (0) {
    BasicTreeDispatch.prototype.match_context = function(entry, plugin) {};
    BasicTreeDispatch.prototype.match_context_dir = function(entry, plugin) {};
    BasicTreeDispatch.prototype.match_context_file = function(entry, plugin) {};
  }

  BasicTreeDispatch.prototype.newCtxTree = function(entry) {
    return new ContextTree(this, entry);
  };

  BasicTreeDispatch.prototype.match_context_dir = function(entry, plugin) {
    var tree;
    tree = this.newCtxTree(entry);
    if (tree != null) {
      if (typeof plugin.ctxTree === "function") {
        plugin.ctxTree(entry, tree, this, this.taskCtxTree(entry, tree));
      }
    }
  };

  BasicTreeDispatch.prototype.match_context_file = function(entry, plugin) {
    plugin.variable(entry, this, this.taskCtxVar(entry));
  };

  if (0) {
    BasicTreeDispatch.prototype.match_composite = function(entry, plugin) {};
    BasicTreeDispatch.prototype.match_composite_dir = function(entry, plugin) {};
    BasicTreeDispatch.prototype.match_composite_file = function(entry, plugin) {};
  }

  BasicTreeDispatch.prototype.newCompositeTree = function(entry) {
    return new CompositeTree(this, entry);
  };

  BasicTreeDispatch.prototype.match_composite_dir = function(entry, plugin) {
    plugin.composite(entry, this, this.taskComposite(entry));
  };

  BasicTreeDispatch.prototype.match_composite_file = function(entry, plugin) {
    plugin.compositeFile(entry, this, this.taskCompositeFile(entry));
  };

  return BasicTreeDispatch;

})(BasicTree);

Tree = (function(_super) {

  __extends(Tree, _super);

  function Tree() {
    return Tree.__super__.constructor.apply(this, arguments);
  }

  return Tree;

})(BasicTreeDispatch);

CompositeTree = (function(_super) {

  __extends(CompositeTree, _super);

  function CompositeTree() {
    return CompositeTree.__super__.constructor.apply(this, arguments);
  }

  CompositeTree.prototype.createContentTree = function() {
    if (this.entry.ext) {
      this.parent.addContentFn({
        tree: this,
        entry: this.entry
      }, this.renderCompositeFile.bind(this));
      return this.parent.content.newTree();
    } else {
      return this.addParentContentTree();
    }
  };

  CompositeTree.prototype.renderCompositeFile = function(vars, answerFn) {
    var entryPath, err, item;
    item = this.content.items[this.entry.name];
    if (item != null) {
      return item.renderFn(vars, answerFn);
    } else {
      entryPath = path.join(this.entry.srcRelPath, this.entry.name);
      err = "Composite could not find renderer for '" + entryPath + "'";
      return answerFn(err);
    }
  };

  return CompositeTree;

})(Tree);

ContextTree = (function(_super) {

  __extends(ContextTree, _super);

  function ContextTree() {
    return ContextTree.__super__.constructor.apply(this, arguments);
  }

  ContextTree.prototype.ctxKey = function(entry) {
    if (entry == null) {
      entry = this.entry;
    }
    return entry.name0;
  };

  ContextTree.prototype.initCtx = function(ctx, entry) {
    return Object.create(ctx[this.ctxKey(entry)] || null);
  };

  ContextTree.prototype.match_simple_file = function(entry, plugin) {
    return plugin.variable(entry, this, this.taskCtxVar(entry));
  };

  ContextTree.prototype.createContentTree = function() {
    return this.parent.content.newTree();
  };

  return ContextTree;

})(BasicTreeDispatch);

module.exports = {
  BasicTree: BasicTree,
  BasicTreeDispatch: BasicTreeDispatch,
  Tree: Tree,
  CompositeTree: CompositeTree,
  ContextTree: ContextTree,
  createRoot: function(site, mountPoint) {
    return new Tree(site, mountPoint);
  }
};
